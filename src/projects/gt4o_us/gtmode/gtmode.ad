//---------------------------------------------------------------------------------------
// gtmode.ad
//
// GT Mode Project
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

#define FLAG_BONNET_CAM (1);
#define FLAG_INTERIOR_CAM (1 << 1);
#define FLAG_GT3_CAM (1 << 2);
#define FLAG_ROOF_CAM (1 << 3);

#define FLAG_PRIZE_RANDOMIZER (1);
#define FLAG_TRACK_RANDOMIZER (1 << 1);

module GTmodeProject
{
    PROJECT.load(main::game.option.game_zone + "_carlist");

    #include "../share/dialog.ad"
    #include "../share/page_util.ad"
    #include "../share/course_define.ad"
    #include "../share/event_define.ad"
    #include "../share/nation.ad"
    #include "../share/dealer_define.ad"
    #include "../share/parts_shop_name.ad"
    #include "../share/race_util.ad"
    #include "../share/regulation.ad"
    #include "../share/shot_screen.ad"
    #include "wheel.ad"
    #include "../share/memorycard.ad"

    #define MISSION_COUNT 40

    static color_transition = nil;
    static cross_transition = nil;
    static block_transition = nil;

    static last_focus = nil;

    static description = nil;
    static Common = nil;

    static getcourse_list = [];

    static wide = main::game.option.wide_mode;

    static last_dealer_img = nil;
    static randomizer_flag = 0;
    static global_asmo = -1;
    static global_asmu = -1;
    static global_tcsc = -1;
    static aspec_reward = -1;
    static show_owned_cars = -1;
    static video_mode = -1;
    static cam_flag = 8; // Bitflag to enable just roof cam by default
    static gauge_mode = -1; // -1 = Default, 0 = Always analog, 1 = Always digital
    static transmission_volume = 2; // 0 = off, 1 = quiet, 2 = normal, 3 = loud

    static owned_cars = [];
    static is_kaizo = false;
    static is_debug = false;
    static special_paint_allowed = true;
    
    static discount_tuner;
    static discount_pricemult;

    function pushGetCourse(pair)
    {
        getcourse_list.push(pair);
    }

    function showGetCourse(context, endFunc)
    {
        if (getcourse_list.size > 0)
        {
            context.pushEvent(main::menu::MScriptEvent(context, GTmodeProject, "getcourseCB", [endFunc]));
        }
        else if (endFunc != nil)
            endFunc(context);
    }

    function getcourseCB(context, endFunc)
    {
        for (var i = 0; i < getcourse_list.size; i++)
        {
            var crs = getcourse_list[i][0];
            var place = getcourse_list[i][1];
            var crs_name = context.translate(GTmodeProject, "CourseNameCaption", crs);
            var place_name = context.translate(TopRoot, "place_" + place);
            var message = context.translate(TopRoot, "you can run a course").build(crs_name, place_name);
            GetCourseDialog::open(context, message, crs);
        }

        getcourse_list = [];
        if (endFunc != nil)
            endFunc(context);
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {

        }
        return EVENTRESULT_CONTINUE;
    }

    function onLoad(context)
    {
        main::sound.load();

        var option = main::game.option;

        // Unset "persistent" vars set by event synth or so they don't apply to normal events
        main::game.overrideLaps(-1); 
        main::game.toggleMultiCategoryAI(false);        
        
        if (option.automatic_gear != option.race_display_car_name)
        {
            option.automatic_gear = option.race_display_car_name;
        }
        
        context.loadGpb("projects/gtmode", "Template");

        // Leftover kaizo run-related stuff, may use this post-release
        // If we're on a kaizo run and it's the first time we've played, complete licence B to gold and enable the randomizer
        if (is_kaizo && main::game.option.narration == 0)
        {
            var licences = ["l0b", "l0a", "lib", "lia", "l0s"];
            main::game.option.entrance_addr = "r=1;o=0;u=0;t=0;as=1;so=1;vm=1;c=8;g=-1;tm=2";

            for (var i = 0; i < licences.size; i++)
            {
                for (var j = 0; j < 16; j++)
                {
                    var race_code = licences[i] + "%04d".format(j + 1);
                    var unit = main::game.race_record.getUnit(race_code);
                    unit.update("license", "gold");
                    main::game.calendar.putRunLicenseEvent("jp" + race_code, unit.result, "", 10000);
                }
            }
        }

        var settings = main::game.option.entrance_addr.split(";");

        for (var i = 0; i < settings.size; i++)
        {
            var [k, v] = settings[i].split("=");
            switch (k)
            {
                case "r":
                    if (v < 0)
                        v = 0;
                    randomizer_flag = v.toInt();
                    break; 

                case "o":
                    global_asmo = v.toInt();
                    break;
                
                case "u":
                    global_asmu = v.toInt();
                    break;

                case "t":
                    global_tcsc = v.toInt();
                    break;

                case "as":
                    aspec_reward = v.toInt();
                    break;

                case "so":
                    show_owned_cars = v.toInt();
                    break;

                case "vm":
                    video_mode = v.toInt();
                    break;

                case "c":
                    cam_flag = v.toInt();
                    break;

                case "g":
                    gauge_mode = v.toInt();
                    break;

                case "tm":
                    transmission_volume = v.toInt();
                    break;
            }
        }

        context.createRenderContext(1);
        var render_context = context.getRenderContext(0);

        color_transition = main::menu::MColorTransition();
        cross_transition = main::menu::MCrossTransition();
        block_transition = main::menu::MBlockTransition();

        render_context.transition = cross_transition;
        render_context.transition.panIn(render_context);

        var present_list = PresentRoot::makeEntitledPresentListByProject();
        
        var page = nil;

        // Reset the variable we're using for lap count modifier, but only if we haven't suspended a championship, since it may have been using the mult
        if (!main::game.isSuspended())
            main::game.option.LAN_auto_machine_num = 1;

        if (main::game.isSuspended())
        {
            page = TopRoot;
            do
            {

            } while (main
                ::game.menuPop() != nil)
        }
        else if (present_list.size > 0)
        {
            PresentRoot::current_list = present_list;
            page = PresentRoot;
        }
        else if (main::game.major_menu_project == "gtmode" && main::game.major_menu_page != "")
        {
            if (GTmodeProject.defined(main::game.major_menu_page))
                page = GTmodeProject[main::game.major_menu_page];
            else
                page = TopRoot;

            main::game.major_menu_project == ""; // BUG: '=' instead of typoed '=='
            main::game.major_menu_page = "";
        }
        else
        {
            page = TopRoot;
        }

        Common = Template::Common.doCopy();
        Common["Header"]["DateJP"]["tsuki"].localized_text_page = "GTmodeProject::Template";
        Common["Header"]["DateJP"]["hi"].localized_text_page = "GTmodeProject::Template";

        if (page != nil)
        {
            if (page.defined("onStart"))
                page["onStart"](context.getRenderContext(0));
                render_context.startPage(page);
        }

        main::game.major_menu_project = "gtmode";

        var [achievement, score] = getRaceEventRecordStatistics();
        if (achievement < 250.0)
            main::game.met_type = 0;
        else if (achievement < 500.0)
            main::game.met_type = 1;
        else
            main::game.met_type = 2;
    }

    static restart_flg = false;

    function fnv1a(str)
    {
        var result = 0x811c9dc5;
        var prime = 16777619;
        for (var i = 0; i < str.size; i++)
        {
            result ^= str.at(i);
            result *= prime;
        }

        return result;
    }

    function getRandomCourse(context, race_name, use_seed)
    {
        use_seed = false; // qqq
        module EventSynthModule { }
        EventSynthModule.load("/projects/specii/EventSynthCourses");
        var course_array = [];
        var select_type = "";

        // Grab the original data so we can check which type of track list we're pulling from
        var race = main::menu::MRaceData(race_name);
        
        switch (race.getNeedTire())
        {
            case 3:
                select_type = "rally_dirt_courses";
                break;

            case 4:
                select_type = "rally_snow_courses";
                break;

            default:
                if (race.entry_num < 6)
                    select_type = "rally_road_courses";
                else
                    select_type = "six_car_courses";
                break;
        }

        print "select_type == %{select_type}";

        if (EventSynthModule::EventSynthCourses.defined(select_type))
            course_array = EventSynthModule::EventSynthCourses[select_type];

        EventSynthModule.clearStatic();

        if (course_array.size == 0)
        {
            openConfirmDialog(context, 1, "Track randomizer is active but no match was found for %{select_type}");
            return "";
        }
        else
        {
            var rnd = -1;
            if (use_seed)
                rnd = main::menu::MRandom::GetValue(0, course_array.size, fnv1a(main::game.username + race_name));
            else 
                rnd = main::menu::MRandom::GetValue(0, course_array.size);
                
            return course_array[rnd];
        }
    }

    function onUnload(context)
    {
        Common = nil;
        description = nil;
        context.unloadGpb("Template");
        main::sound.unload();
    }

    function needSave()
    {
        main::game.setNeedSave();
    }

    function saveAuto(context, root, end_func, progress)
    {
        if (progress == nil)
            progress = 1;

        main::game.major_menu_project = "gtmode";
        main::game.major_menu_page = root.name;

        context.pushEvent(main::menu::MScriptEvent(context, GTmodeProject, "doAutoSave", [root, end_func, progress]));
    }

    function saveAutoBlock(context, root, end_func, progress)
    {
        if (progress == nil)
            progress = 1;

        main::game.major_menu_project = "gtmode";
        main::game.major_menu_page = root.name;

        doAutoSave(context, root, end_func, progress);
    }

    function doAutoSave(context, root, end_func, progress, makeEnable)
    {
        setCursor(context, "wait");

        if (progress)
            openProgressDialog(context, context.translate(GTmodeProject, "MemoryCard", "now_saving"));

        var r = autoSave2(context, root["Common"]["Header"]["Memorycard"], nil, makeEnable);
        if (progress)
            closeProgressDialog(context);

        setCursor(context);
        if (r && end_func != nil)
            end_func(context);

        context.flushKeyEvent();
        return r;
    }

    function refreshRideCar(root, context, isUserTriggered)
    {
        var garage = main::game.garage;
        var car = root["Common"]["Header"]["Car"];
        var visible = car.visible;
        car.visible = false;
        var label = car["label"];

        if (garage.hasRidingCar())
        {
            label.text = garage.riding_car.short_name;
            label.abbreviate();
            var curr_car = main::game.garage.riding_car;

            // Settings can be saved as -1 to disable the overrides entirely
            if (global_asmo != nil && global_asmo != -1)
            {
                if (global_asmo == 0)
                    curr_car.setASCCSetting(0, global_asmo);
                else
                {
                    // Weird off by one indexing?
                    global_asmo += 1;
                    curr_car.setASCCSetting(0, global_asmo);
                }
            }

            if (global_asmu != nil && global_asmu != -1)
            {
                if (global_asmu == 0)
                    curr_car.setASCCSetting(1, global_asmu);
                else
                {
                    global_asmu += 1;
                    curr_car.setASCCSetting(1, global_asmu);
                }
            }

            if (global_tcsc != nil && global_tcsc != -1)
            {   
                if (global_tcsc == 0)
                    curr_car.setTCSCSetting(0, global_tcsc);
                else
                {
                    //var tcsc = (curr_car.getTCSCRange()[0] - global_tcsc) + 1;
                    curr_car.setTCSCSetting(0, (10 - global_tcsc) + 1);
                }
            }

            //if (isUserTriggered != nil && isUserTriggered)
            //{
                // Seems there's no clean way to do this on car purchase, so checking on manual car change instead
                // Safe to do if they already exist as it does nothing
                print curr_car.car_code;
                if (isCarInCategory(curr_car.car_code, "rally"))
                {
                    curr_car.getParts(25, 11);
                    curr_car.getParts(25, 12);
                    curr_car.getParts(26, 11);
                    curr_car.getParts(26, 12);
                }
            //}

            car["chip"].setData(garage.riding_car);
            car["chip"].doInitialize(context);
            car["chip"].visible = true;
        }
        else
        {
            car["chip"].visible = false;
            label.text = "--";
        }

        refreshHeaderAlignment(root);
        car.visible = visible;
    }

    function refreshMoney(root)
    {
        var label = root["Common"]["Header"]["Money"]["label"];
        label.text = "%s".format(main::game.money);
        refreshHeaderAlignment(root);
    }

    function refreshDate(context, root)
    {
        var calendar = main::game.calendar;
        var today = calendar.today;
        var date = nil;

        if (main::menu::MUnit::IsCalendarTypeDayFirst())
        {
            root["Common"]["Header"]["DateJP"].visible = false;
            date = root["Common"]["Header"]["DateUS"];
        }
        else
        {
            date = root["Common"]["Header"]["DateJP"];
            root["Common"]["Header"]["DateUS"].visible = false;
        }

        date.visible = true;
        date["month"].text = context.translate(TopRoot, "month" + today[1]);
        date["day"].text = today[2];
    }

    function refreshHeaderAlignment(root)
    {
        var margin = 8.0;
        var common = root["Common"];
        var header = common["Header"];
        var money = header["Money"];
        var car = header["Car"];
        var title = header["Title"];

        var money_left = (money.x + money.w) - money["label"].getTextSize()[0] - money["cr"].w;
        money["cr"].x = money_left - money.x;

        car["label"].x = (car.w - car["label"].getTextSize()[0]) - margin;
        car["label"].align = 3;
        car["chip"].x = car["label"].x - 12.0;
        car["chip0"].x = car["chip"].x + 1.0;
        car.x = money_left - car.w;

        var title_label = title["label"];
        title_label.w = car.x - (title.x + title_label.x) - 12.0;
        title_label.scale_x = 1.0;
        title_label.scale_y = 1.0;
        title_label.adjustScale();
    }

    function checkPresent(context)
    {
        var present_list = PresentRoot::makeEntitledPresentListByPage();
        for (var i = 0; i < present_list.size; i++)
        {
            var id = present_list[i];
            var column = PresentRoot::makeTimeColumn(id);
            var code = column[3];
            
            switch (column[2])
            {
                case "course":
                    if (CourseData.defined(code))
                    {
                        pushGetCourse([code, column[4]]);
                        main::game.setCourseAvailable(code);

                        if (CourseData[code].has_reverse)
                            main::game.setCourseAvailable("r_" + code);
                    }

                    main::game.present.setByTime(id);
                    break;

                default:
                    break;
            }

        }

    }

    function checkASpecPoints(context, present_list)
    {
        var pts = getRaceEventRecordStatistics()[1];

        if (pts >= 10000 && aspec_reward < 1)
        {
            aspec_reward = 1;
            present_list.push(177); // ID in present list, not a car ID
        }

        if (pts >= 15000 && aspec_reward < 2)
        {
            aspec_reward = 2;
            present_list.push(178);
        }

        if (pts >= 20000 && aspec_reward < 3)
        {
            aspec_reward = 3;
            present_list.push(179);
        }

        saveNewSettings(context, false, false);
    }

    function refreshOwnedCars()
    {
        owned_cars = [];
        var garage = main::game.garage;
        var list = garage.pickup();
        print list;
        for (var i = 0; i < list.size; i++)
        {
            owned_cars.push(main::menu::MCarData::GetCarNumericCode(list[i].car_code));
        }
        owned_cars.sort();
    }

    function getCarCategory(car_label)
    {
        module CarCategoryModule { }
        CarCategoryModule.load("/projects/specii/carcategories");
        var res = nil;
        
        if (CarCategoryModule::CarCategories.defined("categories"))
        {
            var cc = CarCategoryModule::CarCategories;
            var categories = cc["categories"];
            for (var i = 0; i < categories.size; i++)
            {
                if (cc.defined(categories[i] + "_cars"))
                {
                    if (cc[categories[i] + "_cars"].bsearch(car_label))
                    {
                        res = categories[i];
                        break;
                    }
                }                  
            }
        }

        CarCategoryModule.clearStatic();

        return res;
    }

    function isCarInCategory(car_label, category_name)
    {
        module CarCategoryModule { }
        var res = -1;

        CarCategoryModule.load("/projects/specii/carcategories");
        var cc = CarCategoryModule::CarCategories;

        if (cc.defined(category_name + "_cars"))
            res = cc[category_name + "_cars"].bsearch(car_label);

        CarCategoryModule.clearStatic();

        return res != -1;
    }

    function isHallComplete(hall)
    {
        var events = EventData[hall];
        var allWon = true;
        
        for (var i = 1; i < events.size; i++)
        {
            var event = events[i].race_code;
            var won = wonRace(event);

            if (!won)
            {
                allWon = false;
                break;
            }
        }

        return allWon;
    }

    function printHallPrizes(context, hall)
    {
        var events = EventData[hall];
        print hall;
        
        for (var i = 1; i < events.size; i++)
        {
            var event = events[i].race_code;

            var idx = -1;
            var code = event;

            if (event.endWith("1"))
                code = event.substr(0, event.size - 1) + "0";

            for (var j = 0; j < PresentData::detail_carlist.size; j++)
            {
                if (PresentData::detail_carlist[j] == code)
                {
                    idx = j;
                }
            }

            if (idx > -1)
            {
                if (PresentData::content_carlist[idx] != nil)
                {
                    //logInfo("%{callingItem}: %{code}, prize = %{main::menu::MCarData::GetCarName(PresentData::content_carlist[idx])}");
                    print "%{context.translate(EventHallRoot, "EventName", code.substr(0, code.size - 5))} - %{main::menu::MCarData::GetCarName(PresentData::content_carlist[idx])}";
                }
            }
        }
    }

    function isCarOwned(car_label)
    {
        var current_code = main::menu::MCarData::GetCarNumericCode(car_label);
        var res = owned_cars.bsearch(current_code);
        return res != -1;
    }

    function reloadCarList(context)
    {
        NewCarData.clearStatic();
        LegendCarData.clearStatic();
        CompleteCarData.clearStatic();
        PresentData.clearStatic();
        PresentTimeData.clearStatic();
        EnemyCarData.clearStatic();
        LicenseCarData.clearStatic();
        PROJECT.load("projects/gtmode/" + main::game.option.game_zone + "_carlist");
    }

    function copyGarageCar(context, col, is_new)
    {
        var idx;
        var riding_car = main::game.garage.riding_car;
        riding_car.updateCurrentStatus();
        riding_car.setupPartsBuffer();
        var cg = main::menu::MCarGarage(riding_car.car_code);

        cg.setupPartsBuffer();

        if (is_new)
        {
            // Restoring a car to brand new
            idx = main::game.garage.addNewCar(riding_car.car_code, col);
        }
        else 
        {
            // Repainting a car and preserving as much original condition as we can (but replacing the oil inside copyParts because we have to use addUsedCar and we're not nasty)
            var conv_mult = 1.0;
            
            if (riding_car.getOdometer("%.1t%s").endWith("miles"))
                conv_mult = 1.60934;

            cg.makeUsed(0, col, (riding_car.getOdometer("%.1t").toFloat() * 1000) * conv_mult);
            idx = main::game.garage.addUsedCar(cg);
        }
        copyParts(context, riding_car, idx);
    }

    function copyParts(context, from_car, idx)
    {
        var ownedParts = [];
        var fittedParts = [];
        var prev_idx = from_car.getGarageIndex();

        for (var i = 1; i < 33; i++)
        {
            var equippedLevel = from_car.getEquipedParts(i);

            if (equippedLevel > -1)
                fittedParts.push([i, equippedLevel]);

            for (var j = 0; j < from_car.getPartsTypeMax(i); j++)
            {
                if (from_car.isHavingParts(i, j))
                {
                    ownedParts.push([i, j]);
                }
            }
        }

        var manager = checkGameData(context, 0, nil);
        if (manager != nil)
        {
            var r = main::game.garage.changeRidingCar(idx, manager);
            if (r == "OK")
            {
                var new_car = main::game.garage.riding_car;
                new_car.replaceOil();

                for (var i = 0; i < ownedParts.size; i++)
                {
                    new_car.getParts(ownedParts[i][0], ownedParts[i][1]);
                }

                from_car.updateCurrentStatus();
                new_car.updateCurrentStatus();
                new_car.loadPartsInfo();

                for (var i = 0; i < fittedParts.size; i++)
                {
                    if (fittedParts[i][0] == 13 || fittedParts[i][0] == 14 || fittedParts[i][0] == 28)
                        print("Engine Tune part found: %{fittedParts[i][0]}: %{fittedParts[i][1]}");
                    new_car.setParts(fittedParts[i][0], fittedParts[i][1]);
                }

                for (var i = 0; i < 10; i++)
                    new_car.setGearSetting(i, from_car.getGearSetting(i));
                new_car.setDriveTrainSetting(from_car.getDriveTrainSetting());
                new_car.setRacingModifySetting(from_car.getRacingModifySetting());
                new_car.setLSDSetting(from_car.getLSDSetting());
                //print "Old suspension setting = %{from_car.getSuspensionSetting()}";
                //print "New suspension setting = %{new_car.getSuspensionSetting()}";
                //new_car.setSuspensionSetting(from_car.getSuspensionSetting());
                new_car.setTCSCSetting(from_car.getTCSCSetting());
                new_car.setASCCSetting(from_car.getASCCSetting());
                new_car.setBallastSetting(from_car.getBallastSetting());
                new_car.setNOSSetting(from_car.getNOSSetting());


                main::game.garage.delCar(prev_idx);
            }
        }        
    }

    function checkPrizeCars(context)
    {
        var unobtainableCars = "";
        for (var i = 0; i < PresentData::allcars_carlist.size; i++)
        {
            var thisCar = PresentData::allcars_carlist[i];

            var tuner = main::menu::MCarData::GetTuner(thisCar)
            var info = "";
            var isInNewDealer = false;
            var isInClassicDealer = false;
            var isInTunerDealer = false;
            var isInUsedDealer = false;
            var isPrizeCar = false;

            if (NewCarData.defined(tuner + "_carlist"))
            {
                var newcar = NewCarData[tuner + "_carlist"];
                newcar.sort();

                if (newcar.bsearch(thisCar) != -1)
                    isInNewDealer = true;
            }

            if (LegendCarData.defined(tuner + "_carlist"))
            {
                var legendcar = LegendCarData[tuner + "_carlist"];
                legendcar.sort();

                if (legendcar.bsearch(thisCar) != -1)
                    isInClassicDealer = true;
            }

            if (CompleteCarData.defined(tuner + "_carlist"))
            {
                var completecar = CompleteCarData[tuner + "_carlist"];
                completecar.sort();

                if (completecar.bsearch(thisCar) != -1)
                    isInTunerDealer = true;
            }

            if (isInNewDealer)
                info = "present in new %{tuner} dealer";
            if (isInClassicDealer)
                info = "present in classic %{tuner} dealer";
            if (isInTunerDealer)
                info = "present in tuned car %{tuner} dealer";
            if (!isInNewDealer && !isInClassicDealer && !isInTunerDealer)
            {
                var game_zone = main::game.option.game_zone;
                // Only do this if the others don't work as it's intensive
                for (var j = 0; j < 100; j++)
                {
                    module UsedCarModule {}
                    //UsedCarModule.clearStatic();
                    UsedCarModule.load("usedcar/" + game_zone + "_used%04d".format(j));

                    for (var k = 0; k < 3; k++)
                    {
                        var usedcar = UsedCarModule::UsedCarData["usedcar_0%{k}_carlist"];
                        usedcar.sort();

                        var res = usedcar.bsearch(thisCar);
                        if (res != -1)
                            isInUsedDealer = true;

                        if (isInUsedDealer)
                            break;
                    }
                    if (isInUsedDealer)
                        break;
                }

                // If we got here then we couldn't find the car in any dealer or prize list, it must be impossible to unlock
                if (!isInUsedDealer)
                    unobtainableCars += "%{thisCar};";
            }
                
            if (main::menu::MCarData::NotForSell(thisCar))
            {
                var prizecar = PresentData::content_carlist;
                prizecar.sort();

                if (prizecar.bsearch(thisCar) != -1)
                    isPrizeCar = true;

                // If flagged as not for sale, but no way to unlock it (ignoring presence in dealers), it must be unobtainable
                if (!isPrizeCar)
                    unobtainableCars += "%{main::menu::MCarData::GetCarName(thisCar)} (%{thisCar});";
            }
        }

        unobtainableCars = unobtainableCars.substr(0, unobtainableCars.size - 1);
        var cars = unobtainableCars.split(";");
        var col1 = "";
        var col2 = "";

        for (var i = 0; i < cars.size; i++)
        {
            if (i >= 32)
            {
                col2 += "etc.";
                break;
            }

            if (i > 16)
                col2 += i == cars.size - 1 ? "- %{cars[i]}" : "- %{cars[i]}\n"; 
            else
                col1 += i == cars.size - 1 ? "- %{cars[i]}" : "- %{cars[i]}\n"; 
            
        }
        main::sound.play("ok");
        reloadCarList(context); // Because variables are references and we sorted the existing lists - now refresh them
        TypicalOpponentsPopup::open(context, col1, col2, "Unobtainable Cars");
        //openConfirmDialog(context, 0, unobtainableCars);
    }

    function saveNewSettings(context, refreshCar, doMcSave)
    {
        main::game.option.entrance_addr = "r=%{randomizer_flag};o=%{global_asmo};u=%{global_asmu};t=%{global_tcsc};as=%{aspec_reward};so=%{show_owned_cars};vm=%{video_mode};c=%{cam_flag};g=%{gauge_mode};tm=%{transmission_volume}";
        print main::game.option.entrance_addr;
        if (refreshCar)
            PROJECT.refreshRideCar(TopRoot, context, true);

        if (doMcSave)
            PROJECT.saveAuto(context, TopRoot, nil, false);
        else
            main::game.setNeedSave();
    }

    function checkRegulation(race_code, result_array)
    {
        var race_spec = main::menu::MRaceData(race_code);
        var need_license = race_spec.getNeedLicense();
        
        print "need_license=%{need_license}\n";

        result_array.push(nil);
        result_array.push(nil);

        return true;
    }

    function checkLicense(context, root, category)
    {
        if (!main::game.race_record.isLicensePassed(category))
        {
            main::sound.play("disable");
            var license_name = context.translate(root, "LicenseName", category + "0000");
            openConfirmDialog(context, 2, context.translate(root, "you must have license").format(license_name));
            return false;
        }
        else
        {
            return true;
        }
    }

    function checkEntryTire(context, race_code, course_code)
    {   
        if (canSkipRegs(race_code))
            return true;
            
        var [success, tire] = setLimitedTire(main::game.garage.riding_car, race_code, course_code);
        var tire_name = nil;

        if (tire != nil)
            tire_name = context.translate(TopRoot, "reguration_tire_%02d".format(tire));
        
        if (success)
        {
            if (tire_name != nil)
            {
                main::sound.play("ok");
                openConfirmDialog(context, 0, context.translate(TopRoot, "you change tire").format(tire_name));
            }
            
            return true;
        }
        else
        {
            main::sound.play("disable");
            if (tire_name != nil)
                openConfirmDialog(context, 2, context.translate(TopRoot, "you do not have necessary tire").format(tire_name));

            return false;
        }
    }

    function sureNoGarageFull(context)
    {
        if (!main::game.garage.isFull())
            return true;
        else
        {
            main::sound.play("ok");
            if (openConfirmDialog(context, 1, context.translate(TopRoot, "you cannot get present")))
                return true;
            else
                return false;
        }
    }

    function enterPageNation(context, root, title, nation)
    {
        enterPage(context, root, title, 1);
        var title = root["Common"]["Header"]["Title"];
        var kokki = title["kokki"];
        var label = title["label"];
        
        if (NationData.defined(nation + "2"))
        {
            var l2 = NationData[nation + "2"];
            label.x = kokki.w;
            label.w = Template::original_label_w;
            label.adjustScale();
            label.scale_x = 0.9;
            kokki.visible = true;
            kokki.image_path = "image/arcade/common/" + l2 + ".png";

            // Kokki is copied at a different point to gtmode init, so these are hardcoded to avoid doing something more annoying
            if (wide)
            {
                kokki.h = 30;
                kokki.y = 3;
            }
            else
            {
                kokki.h = 25;
                kokki.y = 5;
            }

            kokki.doInitialize(context);
        }
        else
        {
            label.x = 0.0;
            label.w = Template::original_label_w;
            kokki.visible = false;
        }
    }

    function enterPage(context, root, title, no_translate)
    {
        __enterPage(context, root, title, no_translate);
        //showGetCourse(context);
    }

    function enterPage2(context, root, getcourseEndFunc)
    {
        __enterPage(context, root, "", 1);
        //showGetCourse(context, getcourseEndFunc);
    }

    function __enterPage(context, root, title, no_translate)
    {
        if (no_translate == nil)
            no_translate = false;

        root.appendChild(context, Common);
        var common = root["Common"];
        common["ToolTip"]["tip"].attach();

        var header = common["Header"];
        if (title == nil)
            title = "";
        else if (!no_translate)
            title = context.translate(root, title);

        header["Title"]["label"].x = 0.0;
        header["Title"]["label"].text = title;
        header["Title"]["kokki"].visible = false;

        refreshRideCar(root, context);
        refreshMoney(root);
        refreshDate(context, root);
    }

    function leavePage(context, root)
    {
        var common = root["Common"];
        if (common != nil)
            root.removeChild(context, common);
    }

    function setPageTitle(context, root, title)
    {
        var header = root["Common"]["Header"];
        if (title == nil)
            title = "";

        header["Title"]["label"].text = title;
        header["Title"]["label"].scale_x = 0.9;
    }

    function setHeaderStyle(context, root, title, carname, money, date)
    {
        var header = root["Common"]["Header"];
        header["Title"].visible = title;
        header["Car"].visible = carname;
        header["Money"].visible = money;
        header["Date"].visible = date;
    }

    function setFadeActor(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        actor.repeat = true;
        actor.period = 0.25;
        widget.actor = actor;
    }

    function sureRiding(context)
    {
        if (!main::game.garage.hasRidingCar())
        {
            main::sound.play("disable");
            openConfirmDialog(context, 2, context.translate(TopRoot, "PleaseRideACar"));
            return false;
        }
        else
        {
            return true;
        }
    }

    function sureNoStrange(context)
    {
        if (!main::game.garage.hasRidingCar())
            return true;

        var cg = main::game.garage.riding_car;
        var open_model_type = main::menu::MCarData::GetOpenModelType(cg.car_code);

        if (cg.isStrange())
        {
            main::sound.play("disable");
            openConfirmDialog(context, 2, context.translate(TopRoot, "NoStrangeCar").format(cg.name));
            return false;
        }
        else
        {
            return true;
        }
    }

    function sureNoOpenModel(context)
    {
        if (!main::game.garage.hasRidingCar())
            return true;

        var cg = main::game.garage.riding_car;
        var open_model_type = main::menu::MCarData::GetOpenModelType(cg.car_code);
        if (open_model_type == 2)
        {
            main::sound.play("disable");
            openConfirmDialog(context, 2, context.translate(TopRoot, "NoOpenModelCar").format(cg.name));
            return false;
        }
        else
        {
            return true;
        }
    }

    function sureNoTestCar(context)
    {
        if (!main::game.garage.hasRidingCar())
            return true;

        var cg = main::game.garage.riding_car;
        var test_car = main::menu::MCarData::IsTestCar(cg.car_code);
        if (test_car)
        {
            main::sound.play("disable");
            var nur = context.translate(PROJECT, "CourseNameShort", "nurburgring");
            openConfirmDialog(context, 2, context.translate(TopRoot, "NoTestCar").build(cg.name, nur, nur));
            return false;
        }
        else
        {
            return true;
        }
    }

    function isOpenOrTestCar(context)
    {
        if (!main::game.garage.hasRidingCar())
            return true;

        var cg = main::game.garage.riding_car;
        var open_model_type = main::menu::MCarData::GetOpenModelType(cg.car_code);
        var test_car = main::menu::MCarData::IsTestCar(cg.car_code);
        if (open_model_type == 2 || test_car)
            return true;    
        
        return false;
    }

    function sureNoSuspended(context, event_hall)
    {
        if (main::game.isSuspended())
        {
            var race_code = main::game.suspended_racecode;
            var race_name = getEventNameByRaceCode(context, GTmodeProject, race_code);
            var session = main::game.suspended_session + 1;

            if (!event_hall)
            {
                main::sound.play("disable");
                openConfirmDialog(context, 2, context.translate(TopRoot, "YouAreDuringRace").format(race_name, session));
            }

            if (openConfirmDialog(context, 4, context.translate(TopRoot, "Do you restart the race?").build(race_name, session)))
            {
                if (main::game.loadMenuStack())
                {
                    main::game.course_code = "";
                    main::game.race_code = main::game.suspended_racecode;
                    main::game.major_menu_project = "gtmode";
                    main::game.major_menu_page = EventCourseRoot.name;
                    exit_menu(context, "championship");
                }
                else
                {
                    main::game.abandonRace();
                    openConfirmDialog(context, 2, context.translate(TopRoot, "fail to restart the race").build(race_name, session));
                }
            }
            else if (openConfirmDialog(context, 4, context.translate(TopRoot, "Do you abandon the race?").format(race_name, session)))
            {
                main::game.abandonRace();
                main::game.major_menu_project = "";
                main::game.major_menu_page = "";
                TopRoot::Info.visible = false;
                openConfirmDialog(context, 0, context.translate(TopRoot, "you abandoned the race").format(race_name, session));
            }

            return false;
        }
        else
        {
            return true;
        }
    }

    function sureEnoughMoney(context, amount)
    {
        if (!main::game.isEnoughMoney(amount))
        {
            main::sound.play("disable");
            openConfirmDialog(context, 2, context.translate(TopRoot, "NotEnoughMoney"));
            return false;
        }
        else
        {
            return true;
        }
    }

    function getCarNum(CarData, category)
    {
        var name = category + "_carlist";
        if (CarData.defined(name))
            return CarData[name].size;
        else
            return 0;
    }

    function logInfo(msg, noLines)
    {
        if (!is_debug)
            return;

        print "--------------------";
        print "%{msg}";
        print "--------------------";
    }

    function canEntryGTWorldChamp()
    {
        return true;
    }

    function canEntryExtreme()
    {
        return main::game.race_record.isLicensePassed("lib");//wonRace("pr_gtworld_1000");
    }

    function canEntryEndurance()
    {
        var [achieve, score] = getRaceEventRecordStatistics();
        return achieve >= 200.0;
    }

    // This allows you to use illegal cars in races IF you have completed the event already and are over 20% completion
    // Does not allow you to skip rally tire regs as entering dirt/snow tracks with road tires is unknown behaviour
    function canSkipRegs(race_code)
    {
        // Event gen shouldn't be able to skip tire regs regardless of completion
        if (race_code.beginWith("eventgen"))
            return false;

        var [achieve, score] = getRaceEventRecordStatistics();
        var code = extractSubRaceCode(race_code);
        var regulation = getViolatedRegulation(main::game.garage.riding_car, code[0]);
        var race = main::menu::MRaceData(code[0]);
        var tire = race.getNeedTire();

        // Dirt/snow doesn't have to be violated, if it's there at all then don't bother allowing skips
        if (tire == 3 || tire == 4)
        {
            print "tire req = %{tire}";
            return false;
        }

        if (wonRace(race_code) && achieve.toFloat() >= 200.0 && (regulation.tiretype != "DIRT" && regulation.tiretype != "SNOW"))
            return true;
        else
        {
            logInfo("Cannot skip event requirements. wonRace(%{race_code}) == %{wonRace(race_code)}, achieve = %{achieve}, regulation.tiretype = %{regulation.tiretype}");
            return false;
        }
    }

    function haveRunEvent(event_list_name)
    {
        if (!EventData.defined(event_list_name))
            return false;

        var events = EventData[event_list_name];
        var have = false;

        for (var i = 1; i < events.size; i++)
        {
            var list = extractSubRaceCode(events[i].race_code);
            for (var j = 0; j < list.size; j++)
            {
                var unit = main::game.race_record.getUnit(list[j]);
                if (unit.result != "NONE")
                    return true;
            }
        }

        return false;
    }

    function haveRunMission()
    {
        for (var i = 0; i < MISSION_COUNT; i++)
        {
            var unit = main::game.race_record.getUnit("l0m%04d".format(i + 1));
            if (unit.result != "NONE")
                return true;
        }

        return false;
    }

    function haveWonMissionSequence(start, end)
    {
        for (var i = start; i <= end; i++)
        {
            var unit = main::game.race_record.getUnit("l0m%04d".format(i));
            if (unit.result != "1")
                return false;
        }

        return true;
    }

    function restart(context)
    {
        restart_flg = true;
        main::game.major_menu_page = "";
        start_page(context, nil);
    }

    function exit_menu(context, code)
    {
        start_page(context, nil);
        main::game.next_sequence = code;
        main::game.major_menu_project = "gtmode";
    }

    function exit_menu_quick(context, code)
    {
        context.finish();
        main::game.next_sequence = code;
        main::game.major_menu_project = "gtmode";
    }

    function exit_kick_project(context, project_name)
    {
        main::game.next_menu_project = project_name;
        exit_menu(context, "menu");
    }

    function getWheelName(context, name, used)
    {
        if (used != nil && used != 0)
        {
            var m0 = name.substr(0, 2);
            var idx = name.substr(4, 8).toInt();
            idx += name.at(2);
            idx += name.at(3);
            
            var name = m0 + "%04d".format(idx);
            return name.upcase();
        }
        else
        {
            return context.translate(GTmodeProject, "WheelName", name);
        }
    }

    function getWingName(context, name)
    {
        if (name == nil)
            return nil;
        else
            return context.translate(WingShopRoot, name);
    }

    function setColorTransition(context)
    {
        context.transition = color_transition;
    }

    function setCrossTransition(context)
    {
        context.transition = cross_transition;
        context.transition.period = 0.5;
    }

    function setBlockTransition(context)
    {
        context.transition = block_transition;
    }

    static craft_index = 0;

    function craft(context, event, command_list, func)
    {
        // Cheat set to work on any day
        if (main::game.calendar.getElapsedDate() > -1 && craft_index < command_list.size && event.keysym == command_list[craft_index])
        {
            craft_index++;
            if (craft_index >= command_list.size)
            {
                main::sound.play("return");
                func(context);
                craft_index = 0;
            }
        }
        else
        {
            craft_index = 0;
        }

        return 0;
    }
}