//---------------------------------------------------------------------------------------
// TopRoot.ad
//
// The main GT Mode scrollable map root
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//---------------------------------------------------------------------------------------

module GTmodeProject::TopRoot
{
    static car_has_tuner = false;

    function djb33_hash(str)
    {
        var h = 5381;
        for (var i = 0; i < str.size; i++)
        {
            h += (h << 5);
            h ^= str.at(i); // at returns byte representation of a specific char
        }

        return h;
    }

    function setOriginal(widget) { }

    ScrollWindow::clip::space::NoticeBase.actor = main::menu::MFadeActor(ScrollWindow::clip::space::NoticeBase, 1.0);

    // Set up notification popups
    ScrollWindow::clip::space::Home.defineStatic("notice", nil);
    ScrollWindow::clip::space::License.defineStatic("notice", nil);
    ScrollWindow::clip::space::UsedCarAsia.defineStatic("notice", nil);
    ScrollWindow::clip::space::UsedCarUSA.defineStatic("notice", nil);
    ScrollWindow::clip::space::UsedCarEU.defineStatic("notice", nil);
    ScrollWindow::clip::space::BeginnerHall.defineStatic("notice", nil);
    ScrollWindow::clip::space::ExtremeHall.defineStatic("notice", nil);
    ScrollWindow::clip::space::Mission.defineStatic("notice", nil);
    ScrollWindow::clip::space::DealerJapan.defineStatic("notice", nil);
    ScrollWindow::clip::space::DealerKorea.defineStatic("notice", nil);
    ScrollWindow::clip::space::DealerUSA.defineStatic("notice", nil);
    ScrollWindow::clip::space::DealerGerman.defineStatic("notice", nil);
    ScrollWindow::clip::space::DealerSweden.defineStatic("notice", nil);
    ScrollWindow::clip::space::DealerUK.defineStatic("notice", nil);
    ScrollWindow::clip::space::DealerFrance.defineStatic("notice", nil);
    ScrollWindow::clip::space::DealerItaly.defineStatic("notice", nil);
    ScrollWindow::clip::space::DealerAustralia.defineStatic("notice", nil);
    ScrollWindow::clip::space::DealerSpain.defineStatic("notice", nil);
    ScrollWindow::clip::space::DealerNetherlands.defineStatic("notice", nil);
    ScrollWindow::clip::space::DealerBelgium.defineStatic("notice", nil);
    ScrollWindow::clip::space::TunerCar.defineStatic("notice", nil);
    ScrollWindow::clip::space::EventGen.defineStatic("notice", nil);
    ScrollWindow::clip::space::GTAuto.defineStatic("notice", nil);
    ScrollWindow::clip::space::NoticeBase.visible = false;

    // Set up direction overrides for new icons and nearby affected ones
    // This is hacky as hell but the navigation bounds in mproject aren't very well understood at this point
    ScrollWindow::clip::space::Special.defineStatic("right", ScrollWindow::clip::space::UsedCarAsia);
    ScrollWindow::clip::space::UsedCarAsia.defineStatic("left", ScrollWindow::clip::space::Rally);
    ScrollWindow::clip::space::DirtAndSnow.defineStatic("up", ScrollWindow::clip::space::UsedCarAsia);
    ScrollWindow::clip::space::DealerGerman.defineStatic("up", ScrollWindow::clip::space::EventGen);
    ScrollWindow::clip::space::EventGen.defineStatic("down", ScrollWindow::clip::space::DealerGerman);
    ScrollWindow::clip::space::CityCourse.defineStatic("up", nil);
    ScrollWindow::clip::space::CityCourse.defineStatic("left", ScrollWindow::clip::space::EventGen);
    ScrollWindow::clip::space::CityCourse.defineStatic("down", ScrollWindow::clip::space::PowerAndSpeed);
    ScrollWindow::clip::space::Endurance.defineStatic("up", ScrollWindow::clip::space::CityCourse);
    ScrollWindow::clip::space::Endurance.defineStatic("left", ScrollWindow::clip::space::DealerGerman);
    ScrollWindow::clip::space::Endurance.defineStatic("right", ScrollWindow::clip::space::PowerAndSpeed);
    ScrollWindow::clip::space::Endurance.defineStatic("down", ScrollWindow::clip::space::UsedCarUSA);
    ScrollWindow::clip::space::DealerSweden.defineStatic("down", ScrollWindow::clip::space::DealerBelgium);
    ScrollWindow::clip::space::Mission.defineStatic("down", ScrollWindow::clip::space::TunerCar);
    ScrollWindow::clip::space::TunerCar.defineStatic("up", ScrollWindow::clip::space::Mission);
    ScrollWindow::clip::space::UsedCarUSA.defineStatic("down", ScrollWindow::clip::space::DealerKorea);

    function onLoad(context)
    {
        setFadeActor(Info);
        setFadeActor(ScrollWindow::clip::space::Home::ex);
        setFadeActor(ScrollWindow::clip::space::License::ex);
        setFadeActor(ScrollWindow::clip::space::UsedCarAsia::ex);
        setFadeActor(ScrollWindow::clip::space::UsedCarUSA::ex);
        setFadeActor(ScrollWindow::clip::space::UsedCarEU::ex);
        setFadeActor(ScrollWindow::clip::space::BeginnerHall::ex);
        setFadeActor(ScrollWindow::clip::space::ExtremeHall::ex);
        setFadeActor(ScrollWindow::clip::space::Mission::ex);
        setFadeActor(ScrollWindow::clip::space::DealerJapan::ex);
        setFadeActor(ScrollWindow::clip::space::DealerKorea::ex);
        setFadeActor(ScrollWindow::clip::space::DealerUSA::ex);
        setFadeActor(ScrollWindow::clip::space::DealerGerman::ex);
        setFadeActor(ScrollWindow::clip::space::DealerSweden::ex);
        setFadeActor(ScrollWindow::clip::space::DealerUK::ex);
        setFadeActor(ScrollWindow::clip::space::DealerFrance::ex);
        setFadeActor(ScrollWindow::clip::space::DealerItaly::ex);
        setFadeActor(ScrollWindow::clip::space::DealerAustralia::ex);
        setFadeActor(ScrollWindow::clip::space::DealerSpain::ex);
        setFadeActor(ScrollWindow::clip::space::DealerNetherlands::ex);
        setFadeActor(ScrollWindow::clip::space::DealerBelgium::ex);
        setFadeActor(ScrollWindow::clip::space::TunerCar::ex);
        setFadeActor(ScrollWindow::clip::space::EventGen::ex);
        setFadeActor(ScrollWindow::clip::space::GTAuto::ex);

        for (var w = ScrollWindow::clip::space.first; w != nil; w = w.next)
        {
            var l = w["label"];
            if (l != nil)
                l.adjustScale();
        }

        refreshOwnedCars();
    }

    function resetNotice(item)
    {
        item["notice"] = nil;
        item["ex"].visible = false;
    }

    function setNotice(context, item, key)
    {
        item["notice"] = context.translate(ROOT, key);
        item["ex"].visible = true;
    }

    function setNoticeRaw(item, text)
    {
        item["notice"] = text;
        item["ex"].visible = true;
    }

    function onStart(context)
    {
        setCrossTransition(context);
    }

    function checkAutoSave(context)
    {
        if (main::game.isNeedSave() && main::game.option.auto_save)
        {
            saveAuto(context, ROOT, nil, false);
        }
    }

    
    function de(str)
    {
        var out = "";
        for (var i = 0; i < str.size; i++)
        {
            out += "%c".format(str.at(i) ^ 0x55);
        }
        
        return out;
    }

    function onInitialize(context)
    {
        context.cursor_visible = true;
        car_has_tuner = false;

        checkPresent(context);

        enterPage2(context, ROOT, checkAutoSave);

        checkAutoSave(context);

        ScrollWindow::clip::space::name.text = context.translate(ROOT, "Welcome").format(main::game.username);
        ScrollWindow::clip::space::Home::label.text = context.translate(ROOT, "MyHome").format(main::game.username);

        var fwidget = ROOT.getFocusedWidget();
        if (fwidget != nil)
        {
            ROOT.setFocus(fwidget);
        }
        else
        {
            fwidget = focus_last(ROOT, ScrollWindow::clip::space);
            if (fwidget == nil)
            {
                if (main::game.major_menu_widget != "" && ScrollWindow::clip::space.defined(main::game.major_menu_widget))
                {
                    fwidget = ScrollWindow::clip::space[main::game.major_menu_widget];
                    main::game.major_menu_widget = "";
                }
                else
                {
                    fwidget = ScrollWindow::clip::space::Home;
                }
                ROOT.setFocus(fwidget);
            }
        }

        ScrollWindow.warp(fwidget);

        ROOT.resetToolTip();

        var extreme = canEntryExtreme();
        if (main::game.isSuspended())
        {
            var race_code = main::game.suspended_racecode;
            var race_name = getEventNameByRaceCode(context, ROOT, race_code);
            Info.text = context.translate(ROOT, "CAUTION|during race").format(race_name);
            Info.adjustScale();
            Info.visible = true;
        }
        else
        {
            Info.visible = false;
        }

        // Reset any notification
        resetNotice(ScrollWindow::clip::space::Home);
        resetNotice(ScrollWindow::clip::space::License);
        resetNotice(ScrollWindow::clip::space::UsedCarAsia);
        resetNotice(ScrollWindow::clip::space::UsedCarUSA);
        resetNotice(ScrollWindow::clip::space::UsedCarEU);
        resetNotice(ScrollWindow::clip::space::BeginnerHall);
        resetNotice(ScrollWindow::clip::space::ExtremeHall);
        resetNotice(ScrollWindow::clip::space::Mission);
        resetNotice(ScrollWindow::clip::space::DealerJapan);
        resetNotice(ScrollWindow::clip::space::DealerKorea);
        resetNotice(ScrollWindow::clip::space::DealerUSA);
        resetNotice(ScrollWindow::clip::space::DealerGerman);
        resetNotice(ScrollWindow::clip::space::DealerSweden);
        resetNotice(ScrollWindow::clip::space::DealerUK);
        resetNotice(ScrollWindow::clip::space::DealerFrance);
        resetNotice(ScrollWindow::clip::space::DealerItaly);
        resetNotice(ScrollWindow::clip::space::DealerAustralia);
        resetNotice(ScrollWindow::clip::space::DealerSpain);
        resetNotice(ScrollWindow::clip::space::DealerNetherlands);
        resetNotice(ScrollWindow::clip::space::DealerBelgium);
        resetNotice(ScrollWindow::clip::space::TunerCar);
        resetNotice(ScrollWindow::clip::space::EventGen);
        resetNotice(ScrollWindow::clip::space::GTAuto);

        // Set any icon "notification"
        if (main
            ::menu::MSystem::GetRegionCode() != "tw" && 
            main::menu::MSystem::GetRegionCode() != "cn" && 
            main::menu::MSystem::GetVersionBranch() != "beta" && 
            main::game.calendar.getElapsedDate() <= 0 && 
            !main::game.withdrawn && !main::game.withdrawnGT4p)
        {
            setNotice(context, ScrollWindow::clip::space::Home, "NOTICE|Home_firstday");
        }

        if (main::game.calendar.getElapsedDate() <= 5)
        {
            setNotice(context, ScrollWindow::clip::space::GTAuto, "NOTICE|GTAuto_firstday");
            setNotice(context, ScrollWindow::clip::space::License, "NOTICE|License_firstday");
            setNotice(context, ScrollWindow::clip::space::EventGen, "NOTICE|EventGen_firstday");
        }

        if (main::game.calendar.getElapsedDate() <= 5 && !main::game.garage.hasRidingCar())
        {
            setNotice(context, ScrollWindow::clip::space::UsedCarAsia, "NOTICE|UsedCar_firstday");
            setNotice(context, ScrollWindow::clip::space::UsedCarUSA, "NOTICE|UsedCar_firstday");
            setNotice(context, ScrollWindow::clip::space::UsedCarEU, "NOTICE|UsedCar_firstday");
        }

        if (main::game.garage.hasRidingCar() && !haveRunEvent("BeginnerHallEvents"))
            setNotice(context, ScrollWindow::clip::space::BeginnerHall, "NOTICE|BeginnerHall_earlydays");

        if (main::game.race_record.isLicensePassed("lib") && !haveRunMission())
            setNotice(context, ScrollWindow::clip::space::Mission, "NOTICE|Mission_first");

        if (extreme && !haveRunEvent("ExtremeHallEvents"))
            setNotice(context, ScrollWindow::clip::space::ExtremeHall, "NOTICE|ExtremeHall_available");

        if (main::game.garage.hasRidingCar())
        {
            var car = main::game.garage.riding_car;
            var list = car.getTunerList();

            for (var i = 0; i < list.size; i++)
            {
                var tuner = list[i];
                if (!NationData.defined(tuner))
                    continue;
                
                var widget_name = NationData[tuner];
                if (widget_name != nil)
                {
                    var tuner_name = context.translate(ROOT, "TunerName", tuner);
                    var item = ScrollWindow::clip::space[widget_name];

                    if (widget_name == "TunerCar")
                    {
                        if (item["notice"] == nil)
                        {
                            car_has_tuner = true;
                            setNoticeRaw(ScrollWindow::clip::space[widget_name], 
                                context.translate(ROOT, "NOTICE|you_can_tune_short") + "\n" + tuner_name);
                        }
                        else
                        {
                            setNoticeRaw(ScrollWindow::clip::space[widget_name], item["notice"] + "\n" + tuner_name);
                        }
                    }
                    else if (item["notice"] == nil)
                    {
                        var dealer = list[0];
                        var key = EventData.defined(dealer + "Events") ? "NOTICE|you_can_tune_exact" : "NOTICE|you_can_tune_noevent";
                        setNoticeRaw(ScrollWindow::clip::space[widget_name], 
                            context.translate(ROOT, key).build(car.short_name_no_year, tuner_name));
                    }
                }
            }
        }

        logInfo("UCD week = %{main::game.used_car.week}, elapsed week = %{main::game.calendar.getElapsedWeek(100)}");

        module DiscountModule { }
        DiscountModule.load("/projects/specii/DiscountData");

        if (DiscountModule::DiscountData.defined("discount_week%{main::game.calendar.getElapsedWeek(100)}"));
        {
            [discount_tuner, discount_pricemult] = DiscountModule::DiscountData["discount_week%{main::game.calendar.getElapsedWeek(100)}"];
            var widget_name = NationData[discount_tuner];
            if (widget_name != nil)
            {
                var widget = ScrollWindow::clip::space[widget_name];
                setNotice(context, widget, "%s vehicles are\ncurrently %2d%s off!".format(context.translate(ROOT, "TunerName", discount_tuner), 100 - discount_pricemult, "%%"));
            }
        }

        DiscountModule.clearStatic();

        if (main::game.option.narration == 0) // If tutorial message has not been seen
        {
            // If kaizo run, don't bother showing the message and dismiss it as seen
            if (is_kaizo)
            {
                main::game.option.narration = 1;
                return;
            }
            var event = main::menu::MScriptEvent(context, ROOT, "introMessage");
            context.pushEvent(event);
        }
    }

    function introMessage(context)
    {
        context.sync(0.25);
        openConfirmDialog(context, 0, context.translate(ROOT, "welcome_specii"), "Welcome");
        main::game.option.narration = 1; // Narration set to 1 means the tutorial message has been seen
        PROJECT.saveAuto(context, TopRoot, nil, false);
    }

    function onFinalize(context)
    {
        leavePage(context, ROOT);
    }

    function func(context, args)
    {
        context.sync(1.0);
        return true;
    }

    // 10.000.000 Credits: Select, Left, Right, Right, Down, Up, Up, Left, Down, Up, Right, Left, Down, L1, R1, Select
    static craft_command = [
        //PS2_PAD_CTRL_SELECT,
        PS2_PAD_CTRL_L3_LEFT,
        PS2_PAD_CTRL_L3_RIGHT,
        PS2_PAD_CTRL_L3_RIGHT,
        PS2_PAD_CTRL_L3_DOWN,
        PS2_PAD_CTRL_L3_UP,
        PS2_PAD_CTRL_L3_UP,
        PS2_PAD_CTRL_L3_LEFT,
        PS2_PAD_CTRL_L3_DOWN,
        PS2_PAD_CTRL_L3_UP,
        PS2_PAD_CTRL_L3_RIGHT,
        PS2_PAD_CTRL_L3_LEFT,
        PS2_PAD_CTRL_L3_DOWN,
        PS2_PAD_CTRL_L1,
        PS2_PAD_CTRL_R1,
        //PS2_PAD_CTRL_SELECT,
    ];

    function doCraft(context)
    {
        main::game.incMoney(10_000_000);
        refreshMoney(ROOT);
    }

    function onKeyPress(context, event)
    {
        if (craft(context, event, craft_command, doCraft))
            return EVENTRESULT_FILTER;

        switch (event.keysym)
        {
            // Because the mproject bounds aren't particularly understood, override the up/down/left/right behaviour of the new icons and surrounding areas
            case PS2_PAD_CTRL_L3_UP:
            case PS2_PAD_CTRL_L3_DOWN:
            case PS2_PAD_CTRL_L3_LEFT:
            case PS2_PAD_CTRL_L3_RIGHT:
                var fwidget = ROOT.getFocusedWidget();
                if (fwidget != nil)
                    if (override_movement(context, fwidget, event.keysym))
                        return EVENTRESULT_FILTER;
                return EVENTRESULT_CONTINUE

            case PS2_PAD_CTRL_SELECT:
                main::sound.play("ok");
                QuickMenuPopup::open(context);
                return EVENTRESULT_FILTER;

            case PS2_PAD_CTRL_START:
                main::sound.play("ok");
                SpecIISettingRoot::open(context);
                return EVENTRESULT_FILTER;

            case PS2_PAD_CTRL_CROSS:
                var pwidget = context.getPrelightWidget();
                if (pwidget != nil)
                {
                    ROOT.setFocus(pwidget);
                    pwidget["onActivate"](context);
                }
                return EVENTRESULT_FILTER;

            case PS2_PAD_CTRL_L1:
                main::sound.play("cursor");
                ROOT.setFocus(ScrollWindow::clip::space::Home);
                return EVENTRESULT_FILTER;

            case PS2_PAD_CTRL_L2:
                main::sound.play("cursor");
                ROOT.setFocus(ScrollWindow::clip::space::GTAuto);
                return EVENTRESULT_FILTER;

            case PS2_PAD_CTRL_R1:
                if (main::game.garage.hasRidingCar())
                {
                    var car = main::game.garage.riding_car;
                    var list = car.getTunerList();
                    var tuner = list[0];
                    var widget_name = NationData[tuner];
                    if (widget_name != nil)
                    {
                        main::sound.play("cursor");
                        var widget = ScrollWindow::clip::space[widget_name];
                        ROOT.setFocus(widget);
                    }
                }
                return EVENTRESULT_FILTER;

            case PS2_PAD_CTRL_R2:
                if (is_debug)
                {
                    main::sound.play("ok");
                    if (openConfirmDialog(context, 4, "Open debug?"))
                        start_page(context, DebugMenuRoot);
                }
                else {
                    if (car_has_tuner)
                    {
                        main::sound.play("cursor");
                        ROOT.setFocus(ScrollWindow::clip::space::TunerCar);
                    }
                }
                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }

    // This isn't nice, but because we don't really understand the movement targets in mprojects, it's necessary for now
    function override_movement(context, widget, key)
    {
        switch (key)
        {
            case PS2_PAD_CTRL_L3_UP:
                if (widget.defined("up"))
                {
                    // Hacky - if we've overridden a widget to point at nil or itself, do nothing but return true so the action is consumed
                    if (widget["up"] == widget || widget["up"] == nil)
                        return true;

                    main::sound.play("cursor");
                    ROOT.setFocus(widget["up"]);
                    return true;
                }
                return false;

            case PS2_PAD_CTRL_L3_DOWN:
                if (widget.defined("down"))
                {
                    if (widget["down"] == widget || widget["down"] == nil)
                        return true;

                    main::sound.play("cursor");
                    ROOT.setFocus(widget["down"]);
                    return true;
                }
                return false;

            case PS2_PAD_CTRL_L3_LEFT:
                if (widget.defined("left"))
                {
                    if (widget["left"] == widget || widget["left"] == nil)
                        return true;

                    main::sound.play("cursor");
                    ROOT.setFocus(widget["left"]);
                    return true;
                }
                return false;

            case PS2_PAD_CTRL_L3_RIGHT:
                if (widget.defined("right"))
                {
                    if (widget["right"] == widget || widget["right"] == nil)
                        return true;

                    main::sound.play("cursor");
                    ROOT.setFocus(widget["right"]);
                    return true;
                }
                return false;
        }
    }

    function end_func(context) 
    {

    }

    function onCancel(context)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("cancel");

        if (openConfirmDialog(context, 4, context.translate(ROOT, "Do you escape from GTmode?")))
        {
            main::sound.fadeOutMusic(0.3);
            context.sync(0.3);

            main::game.major_menu_project = "";
            main::game.major_menu_page = "";

            exit_kick_project(context, "arcade");
        }

        return EVENTRESULT_FILTER;
    }

    function on_enter(context, item)
    {
        if (item.defined("bg"))
        {
            var widget = item["bg"];
            widget.target_mode = 0;
            widget.rotate_v = [0.0, 2.0, 0.0];
        }

        show_notice(context, item);
    }

    function on_leave(context, item, noret)
    {
        if (item.defined("bg"))
        {
            var widget = item["bg"];
            if (noret == nil)
                widget.target_mode = 1;

            widget.model_rotate_v = [0.0, 0.0, 0.0];
        }

        if (item.defined("notice"))
        {
            var notice = item["notice"];
            if (item.defined("ex"))
            {
                item["ex"].visible = notice != nil;
            }
        }

        ScrollWindow::clip::space::NoticeBase.visible = false;
    }

    function show_notice(context, item)
    {
        if (item.defined("notice"))
        {
            var notice = item["notice"];
            if (notice != nil)
            {
                var x = nil;
                var y = nil;

                if (item.defined("ex"))
                {
                    x = item.x + item["ex"].x;
                    y = item.y + item["ex"].y - 2.0;
                }
                else
                {
                    x = item.x + item.w;
                    y = item.y;
                }

                ScrollWindow::clip::space::NoticeBase.x = x;
                ScrollWindow::clip::space::NoticeBase.y = y;

                ScrollWindow::clip::space::NoticeBase::Notice::label.text = notice;

                var actor = ScrollWindow::clip::space::NoticeBase.actor;

                actor.out = true;
                actor.warp();
                actor.out = false;

                ScrollWindow::clip::space::NoticeBase.visible = true;

                if (item.defined("ex"))
                    item["ex"].visible = false;
            }
        }
    }
}

/* #################################### */
/*       Sub Menu Icon Handling         */
/* #################################### */

/* -------------- */
/* -- Circuits -- */
/* ---------------*/

// Real Circuits Icon/Button
module GTmodeProject::TopRoot::ScrollWindow::clip::space::RealCircuit
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("RealCircuit");
        start_page(context, CourseEntryRoot);
        return EVENTRESULT_FILTER;
    }

    setOriginal(RealCircuit::bg);

    function onEnter(context)
    {
        on_enter(context, RealCircuit);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, RealCircuit);
        return 1;
    }
}

// Road Tracks Icon/Button
module GTmodeProject::TopRoot::ScrollWindow::clip::space::RoadTrack
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        if (!sureNoTestCar(context))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("RoadTrack");
        start_page(context, CourseEntryRoot);
        return EVENTRESULT_FILTER;
    }

    setOriginal(RoadTrack::bg);

    function onEnter(context)
    {
        on_enter(context, RoadTrack);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, RoadTrack);
        return 1;
    }
}

// City Courses Icon/Button
module GTmodeProject::TopRoot::ScrollWindow::clip::space::CityCourse
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        if (!sureNoTestCar(context))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("CityCourse");
        start_page(context, CourseEntryRoot);
        return EVENTRESULT_FILTER;
    }

    setOriginal(CityCourse::bg);

    function onEnter(context)
    {
        on_enter(context, CityCourse);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, CityCourse);
        return 1;
    }
}

// Dirt & Snow Courses Icon/Button
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DirtAndSnow
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        if (!sureNoTestCar(context))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("DirtAndSnow");
        start_page(context, CourseEntryRoot);
        return EVENTRESULT_FILTER;
    }

    setOriginal(DirtAndSnow::bg);

    function onEnter(context)
    {
        on_enter(context, DirtAndSnow);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DirtAndSnow);
        return 1;
    }
}

// Test Courses/Driving Park Icon/Button
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DrivingPark
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        if (!sureNoTestCar(context))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("DrivingPark");
        start_page(context, CourseEntryRoot);
        return EVENTRESULT_FILTER;
    }

    setOriginal(DrivingPark::bg);

    function onEnter(context)
    {
        on_enter(context, DrivingPark);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DrivingPark);
        return 1;
    }
}

// Photo Travel
module GTmodeProject::TopRoot::ScrollWindow::clip::space::PhotoTravel
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.next_menu_project =  "gtmode";
        main::game.major_menu_page = ROOT.name;
        main::game.race_code = "preview_entry_1";
        main::game.max_entry = 1;

        start_page(context, PhotoTravelRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(PhotoTravel::bg);

    function onEnter(context)
    {
        on_enter(context, PhotoTravel);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, PhotoTravel);
        return 1;
    }
}

/* ----------------- */
/* -- Dealerships -- */
/* ----------------- */

// Japanese Dealership
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DealerJapan
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("japan");
        start_page(context, NationRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(DealerJapan::bg);

    function onEnter(context)
    {
        on_enter(context, DealerJapan);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DealerJapan);
        return 1;
    }
}

// Korean Dealership
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DealerKorea
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("korea");
        start_page(context, NationRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(DealerKorea::bg);

    function onEnter(context)
    {
        on_enter(context, DealerKorea);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DealerKorea);
        return 1;
    }
}

// American Dealership
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DealerUSA
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("usa");
        start_page(context, NationRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(DealerUSA::bg);

    function onEnter(context)
    {
        on_enter(context, DealerUSA);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DealerUSA);
        return 1;
    }
}

// German Dealership
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DealerGerman
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("german");
        start_page(context, NationRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(DealerGerman::bg);

    function onEnter(context)
    {
        on_enter(context, DealerGerman);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DealerGerman);
        return 1;
    }
}

// Swedish Dealership
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DealerSweden
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("sweden");
        start_page(context, NationRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(DealerSweden::bg);

    function onEnter(context)
    {
        on_enter(context, DealerSweden);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DealerSweden);
        return 1;
    }
}

// British Dealership
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DealerUK
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("uk");
        start_page(context, NationRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(DealerUK::bg);

    function onEnter(context)
    {
        on_enter(context, DealerUK);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DealerUK);
        return 1;
    }
}

// French Dealership
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DealerFrance
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("france");
        start_page(context, NationRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(DealerFrance::bg);

    function onEnter(context)
    {
        on_enter(context, DealerFrance);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DealerFrance);
        return 1;
    }
}

// Italian Dealership
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DealerItaly
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("italy");
        start_page(context, NationRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(DealerItaly::bg);

    function onEnter(context)
    {
        on_enter(context, DealerItaly);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DealerItaly);
        return 1;
    }
}

// Australian Dealership
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DealerAustralia
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("australia");
        start_page(context, NationRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(DealerAustralia::bg);

    function onEnter(context)
    {
        on_enter(context, DealerAustralia);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DealerAustralia);
        return 1;
    }
}

// Spanish Dealership
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DealerSpain
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("spain");
        start_page(context, NationRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(DealerSpain::bg);

    function onEnter(context)
    {
        on_enter(context, DealerSpain);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DealerSpain);
        return 1;
    }
}

// Dutch Dealership
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DealerNetherlands
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("netherlands");
        start_page(context, NationRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(DealerNetherlands::bg);

    function onEnter(context)
    {
        on_enter(context, DealerNetherlands);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DealerNetherlands);
        return 1;
    }
}

// Belgian Dealership
module GTmodeProject::TopRoot::ScrollWindow::clip::space::DealerBelgium
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("belgium");
        start_page(context, NationRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(DealerBelgium::bg);

    function onEnter(context)
    {
        on_enter(context, DealerBelgium);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, DealerBelgium);
        return 1;
    }
}

// Tuners Dealerships
module GTmodeProject::TopRoot::ScrollWindow::clip::space::TunerCar
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("tuners");
        start_page(context, NationRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(TunerCar::bg);

    function onEnter(context)
    {
        on_enter(context, TunerCar);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, TunerCar);
        return 1;
    }
}

/* ---------------------- */
/* -- Used Car Dealers -- */
/* ---------------------- */

module GTmodeProject::TopRoot::ScrollWindow::clip::space::UsedCarUSA
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");

        UsedCarRoot::current_region = "US";
        start_page(context, UsedCarRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(UsedCarUSA::bg);

    function onEnter(context)
    {
        on_enter(context, UsedCarUSA);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, UsedCarUSA);
        return 1;
    }
}

module GTmodeProject::TopRoot::ScrollWindow::clip::space::UsedCarAsia
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");

        UsedCarRoot::current_region = "JP";
        start_page(context, UsedCarRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(UsedCarAsia::bg);

    function onEnter(context)
    {
        on_enter(context, UsedCarAsia);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, UsedCarAsia);
        return 1;
    }
}

module GTmodeProject::TopRoot::ScrollWindow::clip::space::UsedCarEU
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");

        UsedCarRoot::current_region = "EU";
        start_page(context, UsedCarRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(UsedCarEU::bg);

    function onEnter(context)
    {
        on_enter(context, UsedCarEU);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, UsedCarEU);
        return 1;
    }
}

/* ------------ */
/* -- Events -- */
/* ------------ */

module GTmodeProject::TopRoot::ScrollWindow::clip::space::RaceAmerican
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, true))
            return EVENTRESULT_FILTER;

        if (!sureNoOpenModel(context))
            return EVENTRESULT_FILTER;

        if (!sureNoTestCar(context))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush(ROOT.name);
        main::game.menuPush("RaceAmerican");
        main::game.menuPush("american.swf");
        main::game.menuPush("AmericanRaceEvents");

        start_page(context, EventHallRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(RaceAmerican::bg);

    function onEnter(context)
    {
        on_enter(context, RaceAmerican);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, RaceAmerican, true);
        return 1;
    }
}

module GTmodeProject::TopRoot::ScrollWindow::clip::space::RaceJapanese
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, true))
            return EVENTRESULT_FILTER;

         if (!sureNoOpenModel(context))
            return EVENTRESULT_FILTER;

        if (!sureNoTestCar(context))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush(ROOT.name);
        main::game.menuPush("RaceJapanese");
        main::game.menuPush("japanese.swf");
        main::game.menuPush("JapaneseRaceEvents");

        start_page(context, EventHallRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(RaceJapanese::bg);

    function onEnter(context)
    {
        on_enter(context, RaceJapanese);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, RaceJapanese, true);
        return 1;
    }
}

module GTmodeProject::TopRoot::ScrollWindow::clip::space::RaceEuropean
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, true))
            return EVENTRESULT_FILTER;
            
         if (!sureNoOpenModel(context))
            return EVENTRESULT_FILTER;

        if (!sureNoTestCar(context))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush(ROOT.name);
        main::game.menuPush("RaceEuropean");
        main::game.menuPush("european.swf");
        main::game.menuPush("EuropeanRaceEvents");

        start_page(context, EventHallRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(RaceEuropean::bg);

    function onEnter(context)
    {
        on_enter(context, RaceEuropean);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, RaceEuropean, true);
        return 1;
    }
}

module GTmodeProject::TopRoot::ScrollWindow::clip::space::BeginnerHall
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, true))
            return EVENTRESULT_FILTER;
            
         if (!sureNoOpenModel(context))
            return EVENTRESULT_FILTER;

        if (!sureNoTestCar(context))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush(ROOT.name);
        main::game.menuPush("BeginnerHall");
        main::game.menuPush("hall.swf");
        main::game.menuPush("BeginnerHallEvents");

        start_page(context, EventHallRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(BeginnerHall::bg);

    function onEnter(context)
    {
        on_enter(context, BeginnerHall);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, BeginnerHall, true);
        return 1;
    }
}

module GTmodeProject::TopRoot::ScrollWindow::clip::space::ProfessionalHall
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, true))
            return EVENTRESULT_FILTER;
            
         if (!sureNoOpenModel(context))
            return EVENTRESULT_FILTER;

        if (!sureNoTestCar(context))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush(ROOT.name);
        main::game.menuPush("ProfessionalHall");
        main::game.menuPush("hall.swf");
        main::game.menuPush("ProfessionalHallEvents");

        start_page(context, EventHallRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(ProfessionalHall::bg);

    function onEnter(context)
    {
        on_enter(context, ProfessionalHall);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, ProfessionalHall, true);
        return 1;
    }
}

module GTmodeProject::TopRoot::ScrollWindow::clip::space::ExtremeHall
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, true))
            return EVENTRESULT_FILTER;
            
        if (!sureNoOpenModel(context))
            return EVENTRESULT_FILTER;

        if (!sureNoTestCar(context))
            return EVENTRESULT_FILTER;

        if (!canEntryExtreme())
        {
            main::sound.play("disable");
            openConfirmDialog(context, 2, context.translate(ROOT, "NeedLicense_ib"));
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");
        main::game.menuPush(ROOT.name);
        main::game.menuPush("ExtremeHall");
        main::game.menuPush("hall.swf");
        main::game.menuPush("ExtremeHallEvents");

        start_page(context, EventHallRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(ExtremeHall::bg);

    function onEnter(context)
    {
        on_enter(context, ExtremeHall);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, ExtremeHall, true);
        return 1;
    }
}

/* --------------------- */
/* -- Power And Speed -- */
/* --------------------- */

module GTmodeProject::TopRoot::ScrollWindow::clip::space::PowerAndSpeed
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        main::game.menuPush("PowerAndSpeed");
        start_page(context, CourseEntryRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(PowerAndSpeed::bg);

    function onEnter(context)
    {
        on_enter(context, PowerAndSpeed);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, PowerAndSpeed);
        return 1;
    }
}

/* -------------------------------- */
/* -- Special Conditions - Rally -- */
/* -------------------------------- */

module GTmodeProject::TopRoot::ScrollWindow::clip::space::Rally
{
    function onActivate(context, event, object)
    {
        if (is_kaizo)
        {
            main::sound.play("disable");
            openConfirmDialog(context, 2, "Disabled in Kaizo build.");
            return EVENTRESULT_FILTER;
        }
        
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        if (!sureNoOpenModel(context))
            return EVENTRESULT_FILTER;

        if (!sureNoTestCar(context))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");

        main::game.menuPush(ROOT.name);
        main::game.menuPush("Rally");
        main::game.menuPush("rally.swf");
        main::game.menuPush("RallyEvents");
        
        start_page(context, EventHallRoot);
        
        return EVENTRESULT_FILTER;
    }

    setOriginal(Rally::bg);

    function onEnter(context)
    {
        on_enter(context, Rally);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, Rally, true);
        return 1;
    }
}

/* -------------- */
/* -- Missions -- */
/* -------------- */

module GTmodeProject::TopRoot::ScrollWindow::clip::space::Mission
{
    function onActivate(context, event, object)
    {
        if (is_kaizo)
        {
            main::sound.play("disable");
            openConfirmDialog(context, 2, "Disabled in Kaizo build.");
            return EVENTRESULT_FILTER;
        }

        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        start_page(context, MissionRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(Mission::bg);

    function onEnter(context)
    {
        on_enter(context, Mission);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, Mission, true);
        return 1;
    }
}

/* ---------------------- */
/* -- Endurance Events -- */
/* ---------------------- */

module GTmodeProject::TopRoot::ScrollWindow::clip::space::Endurance
{
    function onActivate(context, event, object)
    {
        if (is_kaizo)
        {
            main::sound.play("disable");
            openConfirmDialog(context, 2, "Disabled in Kaizo build.");
            return EVENTRESULT_FILTER;
        }
        
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        if (!sureNoOpenModel(context))
            return EVENTRESULT_FILTER;

        if (!sureNoTestCar(context))
            return EVENTRESULT_FILTER;

        if (!is_debug)
        {
            if (!canEntryEndurance())
            {
                main::sound.play("disable");
                openConfirmDialog(context, 2, context.translate(ROOT, "you cannot play Endurance yet"));
                return EVENTRESULT_FILTER;
            }
        }

        main::sound.play("ok");
        main::game.menuPush(ROOT.name);
        main::game.menuPush("Endurance");
        main::game.menuPush("endurance.swf");
        main::game.menuPush("EnduranceEvents");

        start_page(context, EventHallRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(Endurance::bg);

    function onEnter(context)
    {
        on_enter(context, Endurance);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, Endurance, true);
        return 1;
    }
}

/* -------------- */
/* -- Licenses -- */
/* -------------- */

module GTmodeProject::TopRoot::ScrollWindow::clip::space::License
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");
        start_page(context, LicenseRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(License::bg);

    function onEnter(context)
    {
        on_enter(context, License);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, License, true);
        return 1;
    }
}

/* ----------------- */
/* -- Home/Garage -- */
/* ----------------- */

module GTmodeProject::TopRoot::ScrollWindow::clip::space::Home
{
    function onActivate(context, event, object)
    {
        main::sound.play("ok");
        setColorTransition(context);
        context.transition.period = 1.0;

        HomeRoot::open(context);
        return EVENTRESULT_FILTER;
    }

    setOriginal(Home::bg);

    function onEnter(context)
    {
        on_enter(context, Home);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, Home, true);
        return 1;
    }
}

/* -------------------- */
/* -- Replay Theater -- */
/* -------------------- */

module GTmodeProject::TopRoot::ScrollWindow::clip::space::ReplayTheater
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");

        if (!openConfirmDialog(context, 4, "Open Replay Theater?"))
            return EVENTRESULT_FILTER;

        main::game.major_menu_project = "gtmode";
        main::game.major_menu_page = ROOT.name;
        main::game.major_menu_widget = "ReplayTheater";
        exit_menu(context, "load_replay");

        return EVENTRESULT_FILTER;
    }

    setOriginal(ReplayTheater::bg);

    function onEnter(context)
    {
        on_enter(context, ReplayTheater);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, ReplayTheater);
        return 1;
    }
}

/* ------------------- */
/* -- Music Theater -- */
/* ------------------- */

module GTmodeProject::TopRoot::ScrollWindow::clip::space::MusicTheater
{
    function onActivate(context, event, object)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("next");
        main::game.next_menu_arg = "MusicRoot";
        main::game.major_menu_project = "gtmode";
        main::game.major_menu_page = ROOT.name;
        main::game.major_menu_widget = "MusicTheater";
        exit_kick_project(context, "slide");

        return EVENTRESULT_FILTER;
    }

    setOriginal(MusicTheater::bg);

    function onEnter(context)
    {
        on_enter(context, MusicTheater);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, MusicTheater);
        return 1;
    }
}

/* ------------- */
/* -- GT Auto -- */
/* ------------- */

module GTmodeProject::TopRoot::ScrollWindow::clip::space::GTAuto
{
    function onActivate(context, event, object)
    {
        if (!sureRiding(context))
            return EVENTRESULT_FILTER;

        // These are classed as strange cars, but we want to make an exception to let them into GT Auto for repainting
        var cg = main::game.garage.riding_car;
        if (cg.car_code != "formula_gran_turismo_04" && cg.car_code != "midget_mp5_63")
        {
            if (!sureNoStrange(context))
                return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");
        start_page(context, GTAutoRoot);

        return EVENTRESULT_FILTER;
    }

    setOriginal(GTAuto::bg);

    function onEnter(context)
    {
        on_enter(context, GTAuto);
        return 1;
    }

    function onLeave(context)
    {
        on_leave(context, GTAuto);
        return 1;
    }
}

/* ------------- */
/* -- Event Synthesizer -- */
/* ------------- */

module GTmodeProject::TopRoot::ScrollWindow::clip::space::EventGen
{
    static entry_num = 6;
    // TODO: Deprecate and make it work using getRandomCourse
    static two_car_courses = [
        "assisi",
        "capri",
        "paris_rally",
        "tsukuba_wet"
    ];
    
    static six_car_courses = [
        //"20r60r", Maybe
        "akasaka",
        "apricot",
        "autumn",
        "deepforest",
        "fisco",
        "fisco_old",
        "grandvalley",
        "grandvalley_east",
        "highspeedring",
        "hongkong",
        "infineon",
        "infineon_nascar",
        "kashiwa",
        "laguna",
        "midfield",
        "mini",
        "montecarlo",
        "motegi",
        "motegi_east",
        "motegi_west",
        "new_fisco",
        "new_fisco_gt",
        "newyork",
        "nurburgring",
        "oval",
        "paris_tarmac",
        "route5",
        "route5_club",
        "sarthe",
        "sarthe_old",
        "seattle",
        "seoul",
        "suzuka",
        "suzuka_east",
        "suzuka_west",
        //"testcourse", Maybe
        "tt_valencia",
        "trialmt",
        "tsukuba",
        "yosemite"
    ];

    function setFadeActor2(widget)
    {
        var actor = main::menu::MFadeActor(widget, 1.0);
        widget.actor = actor;
        widget.actor.period = 1.0;
        widget.actor.out = true;
        widget.actor.warp();
    }

    function onActivate(context)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;
            
        // if (!main::game.race_record.isLicensePassed("lib"))
        // {
        //     main::sound.play("disable");
        //     openConfirmDialog(context, 2, context.translate(TopRoot, "NeedLicense_ib"));
        //     return EVENTRESULT_FILTER;
        // }
        if (!main::game.garage.hasRidingCar())
        {
            main::sound.play("disable");
            openConfirmDialog(context, 2, context.translate(TopRoot, "PleaseRideACar"));
            return;
        }

        main::sound.play("ok");
        SettingPopup::open(context, doEventGen, false);
        //doEventGen(context);
        
        return EVENTRESULT_FILTER;
    }

    setOriginal(EventGen::bg);

    function onEnter(context)
    {
        on_enter(context, EventGen); // Stop turning on hover for disabled items

        return true;
    }

    function onLeave(context)
    {
        on_leave(context, EventGen, 1);

        return true;
    }

    function doEventGen(context, level, laps, allCategories)
    {
        import main::game;
        import main::network;

        main::game.toggleMultiCategoryAI(allCategories);

        var offset = (level - 3).toFloat() * 0.01;
        var garage = game.garage;

        var isTwoCar = main::menu::MRandom::GetValue(0, 100) < 5;
        var currentCar = garage.riding_car.car_code;
        var course_array = isTwoCar ? two_car_courses : six_car_courses;

        var rand = main::menu::MRandom::GetValue(0, course_array.size - 1);
        game.course_code = course_array[rand];
        game.car_code = currentCar;

        game.overwrite_enemy_num = 0;
        game.major_menu_project = "gtmode";
        game.major_menu_page = "TopRoot";

        var max_entry = main::menu::MCourseData::GetMaxCarNum(game.course_code);
        game.max_entry = max_entry;

        game.race_code = "eventgen_0000";

        if (isOpenOrTestCar(context))
            game.race_code = "eventgen_2car_0000";

        if (!checkEntryTire(context, game.race_code, main::game.course_code))
            return EVENTRESULT_FILTER;

        main::sound.play("next");
        
        var list = main::menu::MCarData::PickUpEnemyCars(main::game.garage.riding_car, 
            EnemyCarData::enemy_carlist,
            offset, 0.04,
            max_entry - 1,
            false); // Is dirt

        for (var i = 0; i < list.size; i++)
            game.setEntryCarCode(i + 1, list[i][0], list[i][1]);

        game.overwrite_enemy_num = list.size;

        game.overrideLaps(laps);

        setFadeActor2(Common::Veil::bg);
        setFadeActor2(Common::Veil::Title);
        setFadeActor2(Common::Veil::Course);

        SettingPopup::close(context);

        context.cursor_visible = false;
        Common::Veil::Title.text = "Event Synthesizer";
        Common::Veil::Course.text = context.translate(ROOT, "CourseName", game.course_code);    
        Common::Veil::Course.adjustScale();

        Common::Veil.visible = true;
        Common::Veil::bg.actor.out = false;
        Common::Veil::Title.actor.out = false;
        Common::Veil::Course.actor.out = false;

        context.sync(1.0);

        exit_menu(context, "solo_event");
    }
}

/* ------------------------ */
/* -- Special Car Events -- */
/* ------------------------ */

module GTmodeProject::TopRoot::ScrollWindow::clip::space::Special
{
    function onActivate(context)
    {
        if (!sureNoSuspended(context, false))
            return EVENTRESULT_FILTER;

        main::sound.play("ok");

        main::game.menuPush(TopRoot);
        main::game.menuPush("Special");
        main::game.menuPush("hall.swf");
        main::game.menuPush("SpecialCarEvents");
        start_page(context, EventHallRoot);

        return EVENTRESULT_FILTER;
    }

    function onEnter(context)
    {
        on_enter(context, Special); // Stop turning on hover for disabled items

        return true;
    }

    function onLeave(context)
    {
        on_leave(context, Special, 1);

        return true;
    }
}