//---------------------------------------------------------------------------------------
// EventCourseRoot.ad
//
// Main events menu root
// 
//---------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------
// module
//--------------------------------------------------------------------------------------

#define MODE_SELECT_RACE 0
#define MODE_SELECT_MODE 1

module GTmodeProject::EventCourseRoot
{
    static page_title;
    static race_list;
    static last_select_race;
    static menu_mode = MODE_SELECT_RACE;
    static preview_enable;
    static last_focus_race_widget = nil;
    static last_focus_mode_widget = nil;
    static track_rand_active = false;
    static show_aspec = false;
    static fg_idx;

    static zoom = 1.0;
    static zoom_range = 0.2;
    static orig_camera_view_angle = Car::CarFace.view_angle;
    static camera_view_angle;
    static watcher = nil;

    function onLoad(context)
    {
        hidden.visible = false;
    }

    function onInitialize(context)
    {
        // Some really awful bug kept adding variables to the menuRef stack which would cause the game to crash in this function
        // Never figured out what it was, but since the string for the SWF file is always at index 2, just keep popping from the stack until it aligns again
        while (!main::game.menuRef(2).endWith(".swf"))
        {   
            main::game.menuPop();
        }

        page_title = getEventTitle(main::game.menuRef(1));
        var bg_name = main::game.menuRef(2);

        if (page_title != nil)
            context.loadGpb("/projects/gtmode", page_title);

        var return_page = main::game.menuRef(4);
        if (return_page != nil && return_page == "DealerRoot")
        {
            var nation = main::game.menuRef(6);
            enterPageNation(context, ROOT, context.translate(NationRoot, "CarTown_" + nation), nation);
        }
        else
        {
            enterPage(context, ROOT, context.translate(EventHallRoot, page_title), 1);
        }

        if (bg_name.substr(bg_name.size - 4) == ".swf")
        {
            BG::flash.visible = true;
            BG::flash.cache = false;
            BG::flash.setFlashPath("image/gtmode/event/" + bg_name);
            BG::flash.doInitialize(context);
            BG::flash.reset();
            BG::image.visible = false;
        }
        else
        {
            BG::image.visible = true;
            BG::image.cache = false;
            BG::image.setImagePath("image/gtmode/event/" + bg_name + ".png");
            BG::image.doInitialize(context);
            BG::flash.visible = false;
        }

        var eventinfo = getEventInfo(main::game.menuRef(1), main::game.menuRef(0));
        var large_flyer_image = nil;
        var small_flyer_image = nil;
        preview_enable = true;

        switch (getRacePrefix(eventinfo.race_code))
        {
            case EVENT_PREFIX_AMATEUR:
            case EVENT_PREFIX_PROFESSIONAL:
            case EVENT_PREFIX_EXTREME:
            case EVENT_PREFIX_SPECIAL:
                large_flyer_image = "piece/event_flyer/" + getRaceType(eventinfo.race_code) + ".img";
                break;

            case EVENT_PREFIX_RALLY_HALL:
                preview_enable = false; // Fall through

            case EVENT_PREFIX_GERMAN:
            case EVENT_PREFIX_ENGLISH:
            case EVENT_PREFIX_EUDURANCE:
            case EVENT_PREFIX_FRENCH:
            case EVENT_PREFIX_ITALIAN:
            case EVENT_PREFIX_JAPANESE:
            case EVENT_PREFIX_KOREAN:
            case EVENT_PREFIX_BRITISH:
            case EVENT_PREFIX_AMERICAN:
                small_flyer_image = "piece/event_flyer/ts_" + getRaceType(eventinfo.race_code) + ".img";
                break;
        }

        if (large_flyer_image != nil)
        {
            var flyer = FG1::flyer;
            flyer.from_disk = true;
            flyer.setImagePath(large_flyer_image);
            
            var flyer_cx = flyer.x + (flyer.w / 2.0);
            flyer.doInitialize(context);
            flyer.adjustSize();
            flyer.x = flyer_cx - (flyer.w / 2.0);

            if (wide) 
            {
                flyer.w = 480;
                flyer.h = 286;
                flyer.x = 80;
            }
            else
            {
                flyer.w = 640;
                flyer.h = 285;
                flyer.x = 0;
            }

            var info = FG1::info;
            info.text = getEventDescriptionByRaceCode(context, ROOT, eventinfo.race_code);
            info.adjustScale();

            var label = FG1::label;
            label.text = getEventNameByRaceCodeForTitle(context, ROOT, eventinfo.race_code);
            label.adjustScale();
            FG1.visible = true;
            FG2.visible = false;
            fg_idx = 1;
        }
        else
        {
            if (small_flyer_image != nil)
            {
                var flyer = FG2::flyer;
                flyer.from_disk = true;
                flyer.setImagePath(small_flyer_image);
                
                var flyer_cx = flyer.x + (flyer.w / 2.0);
                flyer.doInitialize(context);
                flyer.adjustSize();
                flyer.x = flyer_cx - (flyer.w / 2.0);

                if (wide) 
                {
                    flyer.w = 480;
                    flyer.x = 80;
                }
                else
                {
                    flyer.w = 640;
                    flyer.x = 0;
                }
            }
            else
            {
                var logo = FG2::logo;
                var logo_cx = logo.x + (logo.w / 2.0);
                var logo_cy = logo.y + (logo.h / 2.0);
                logo.from_disk = true;
                logo.doInitialize(context);
                logo.adjustSize();
                logo.x = logo_cx - (logo.w / 2.0);
                logo.y = logo_cy - (logo.h / 2.0);
            }

            var info = FG2::info;
            info.text = getEventDescriptionByRaceCode(context, ROOT, eventinfo.race_code);
            info.adjustScale();

            var label = FG2::label;
            label.text = getEventNameByRaceCodeForTitle(context, ROOT, eventinfo.race_code);
            label.adjustScale();

            var stage = FG2::stage;
            stage.text = "";

            var level = getEventLevelByRaceCode(eventinfo.race_code);
            if (level != nil)
            {
                FG2::level.text = context.translate(ROOT, "Level_" + level);
                FG2::level.adjustScale();
                FG2::level.visible = true;
            }
            else
            {
                FG2::level.visible = false;
            }

            if (wide)
                FG2::level.x = 100;
            else 
                FG2::level.x = 18;

            FG1.visible = false;
            FG2.visible = true;
            fg_idx = 2;
        }

        RaceSelect.visible = false;

        var box = RaceSelect::ScrollBox;
        box.y = 0;
        box.actor = main::menu::MMoveActor(box, 0.0, 192.0);
        box.actor.ratio = 0.25;
        box.actor.out = true;
        box.actor.warp();
        ModeSelect.visible = false;

        box = ModeSelect::ScrollBox;
        box.y = 0;
        box.actor = main::menu::MMoveActor(box, 0.0, 192.0);
        box.actor.ratio = 0.25;
        box.actor.out = true;
        box.actor.warp();

        last_select_race = nil;

        init_race_item(context);
        init_mode(context, MODE_SELECT_RACE);

        Car.visible = false;
        Car::CarFace.action_type = "normal";
        Car::CarFace.quality_level = 1;
        
        if (main::game.garage.hasRidingCar())
        {
            Car::CarFace.car_garage = main::game.garage.riding_car;
            Car::CarFace.syncLoading();
        }

        if (Car::CarFace.car_model != nil)
        {
            Car::CarFace.car_model.motion = 1;
            Car::CarFace.car_model.ry = 120.0;
            Car::CarFace.car_model.warp();
        }

        track_rand_active = randomizer_flag & FLAG_TRACK_RANDOMIZER;
        
        Car.visible = true;
        setFadeActor(TypicalOpponents["bgf"]);
        context.cursor_visible = true;

        show_aspec = false;
        FG1::score.visible = false;
        FG1::spec.visible = true;

        camera_view_angle = Car::CarFace.view_angle;
        watcher = main::menu::MScriptWatcher(context, onTick);
        watcher.interval = 1;
        watcher.append();
    }

    function onTick(context)
    {
        var update_context = context.getUpdateContext();
        var ry = update_context.getPadAnalogChannel(0, 1) * -1;
        var target = 1.0;
        
        if (ry > 0.0)
        {
            var z = (ry) * (1.0 / 0.75);

            target = 1.0 - (z * zoom_range);
        }
        else 
        {
            var z = (ry) * (1.0 / 0.75);

            target = 1.0 - (z * zoom_range);
        }

        zoom.value += (target - zoom) * 0.1;
        var fovy = (Math::atan(Math::tan(camera_view_angle * 0.5 * 3.1415927 / 180.0) * zoom)) * 2.0;
        Car::CarFace.view_angle = (fovy * 180.0) / 3.1415927;
    }

    function onFinalize(context)
    {
        watcher.remove();
        Car::CarFace.view_angle = orig_camera_view_angle;  

        ROOT.setFocus(nil);

        RaceSelect::ScrollBox.actor = nil;
        ModeSelect::ScrollBox.actor = nil;

        clear_race_select(context);
        clear_mode_select(context);

        leavePage(context, ROOT);

        if (page_title != nil)
            context.unloadGpb(page_title);
    }

    function onCancel(context)
    {
        main::sound.play("cancel");
        switch (menu_mode)
        {
            case MODE_SELECT_RACE:
                main::game.menuPop();
                start_page(context, EventHallRoot);
                break;

            case MODE_SELECT_MODE:
                init_mode(context, MODE_SELECT_RACE);
                break;
        }

        return EVENTRESULT_FILTER;
    }

    function init_mode(context, mode)
    {
        switch (mode)
        {
            case MODE_SELECT_RACE:
                set_can_focus(RaceSelect::ScrollBox::SelectBox, true);
                set_can_focus(ModeSelect::ScrollBox::SelectBox, false);

                RaceSelect::ScrollBox::SelectBox.can_focus = true;
                ModeSelect::ScrollBox::SelectBox.can_focus = false;

                start_race_menu(context);

                ModeSelect::ScrollBox.actor.out = true;
                context.sync(0.15);

                RaceSelect::ScrollBox.actor.out = false;
                break;

            case MODE_SELECT_MODE:
                init_mode_item(context);

                set_can_focus(RaceSelect::ScrollBox::SelectBox, false);
                set_can_focus(ModeSelect::ScrollBox::SelectBox, true);

                RaceSelect::ScrollBox::SelectBox.can_focus = false;
                ModeSelect::ScrollBox::SelectBox.can_focus = true;

                start_mode_menu(context);

                RaceSelect::ScrollBox.actor.out = true;
                context.sync(0.15);

                ModeSelect::ScrollBox.actor.out = false;
                break;
        }

        RaceSelect.visible = true;
        ModeSelect.visible = true;
        menu_mode = mode;
    }

    function clear_race_select(context)
    {
        RaceSelect::ScrollBox::SelectBox.clearChildren(context);
    }

    function clear_mode_select(context)
    {
        ModeSelect::ScrollBox::SelectBox.clearChildren(context);
    }

    function set_can_focus(composite, canfocus)
    {
        for (var i = 0; i < composite.countChild(); i++)
        {
            var w = composite.getChild(i);
            w.can_focus = canfocus;
        }
    }

    function start_race_menu(context)
    {
        var composite = RaceSelect::ScrollBox::SelectBox;
        if (last_select_race != nil)
        {
            for (var i = 0; i < composite.countChild(); i++)
            {
                var item = composite.getChild(i);
                if (item.defined("racecode") && item["racecode"] == last_select_race)
                {
                    ROOT.setFocus(item);
                    composite.index  = i;
                    break;
                }
            }
        }

        if (ROOT.getFocusedWidget() == nil)
            ROOT.setFocus(composite.first);
    }

    function start_mode_menu(context)
    {
        ROOT.setFocus(ModeSelect::ScrollBox::SelectBox.first);
    }

    function init_race_item(context)
    { // Enter event menu
        ROOT.setFocus(nil);

        clear_race_select(context);

        var composite = RaceSelect::ScrollBox::SelectBox;
        var eventinfo = getEventInfo(main::game.menuRef(1), main::game.menuRef(0));
        if (eventinfo == nil)
            return;
        
        var race_list = extractSubRaceCode(eventinfo.race_code);
        if (race_list == nil)
            return;

        if (getSeriesRaceCount(eventinfo.race_code) > 0)
            add_series_entry_item(context, composite, eventinfo);

        for (var i = 0; i < race_list.size; i++)
            var item = add_series_race_item(context, composite, eventinfo, i);
    }

    function add_series_entry_item(context, target, eventinfo)
    {
        var racecode = eventinfo.race_code;
        var racedata = main::menu::MRaceData(racecode);

        var item = hidden::CourseItem.doCopy();
        item.defineStatic("racecode", racecode);
        set_record(context, item, racecode);

        var logo = item["logo"];
        var logof = item["logof"];
        var logo_cx = logo.x + (logo.w / 2);
        var logo_cy = logo.y + (logo.h / 2);
        logo.from_disk = false;
        logo.setImagePath("image/gtmode/event/event_race_all.png");
        
        logof.from_disk = false;
        logof.setImagePath("image/gtmode/event/event_race_all.png");

        target.appendChild(context, item);
        logo.adjustSize();
        
        var scale = 0.9;

        if (wide)
            scale = 0.75;

        var w = logo.w * scale;
        var h = logo.h * scale;
        logo.x = logo_cx - (w / 2) + 2;
        logo.y = logo_cy - (h / 2);

        logo.w = w;
        logo.h = h;
        logof.x = logo.x;
        logof.y = logo.y;
        logof.w = logo.w;
        logof.h = logo.h;
        setFadeActor(logof);

        var trophy = item["trophy"];
        var cx = trophy.x + (trophy.w / 2);
        var cy = trophy.y + (trophy.h / 2);

        h = trophy.h;
        trophy.adjustSize();
        scale = h / trophy.h;

        if (h > 1.0)
            h = 1.0;

        trophy.x = cx - ((trophy.w * scale) / 2);
        trophy.y = cy - ((trophy.h * scale) / 2);
        trophy.w = trophy.w * scale;
        trophy.h = trophy.h * scale;

        var event_name = getEventNameByRaceCode(context, ROOT, racecode);
        var unit = main::game.race_record.getUnit(racecode);
        var series_count = getSeriesRaceCount(racecode);
        var format_string = context.translate(ROOT, "EntrySeriesRaceFormat");

        item.defineStatic("tooltip_text", format_string.build(event_name, series_count));
        item.defineStatic("event_name", context.translate(ROOT, "SeriesRaceFormat").format(series_count));

        // var racedata = main::menu::MRaceData(racecode);
        var prize_gc = racedata.getPrizeGC();

        if (prize_gc > 0)
        {
            var prize_text = main::menu::MUtility::GetMoneyString(prize_gc);
            item.defineStatic("event_spec", context.translate(ROOT, "ChampionShipPrizeFormat").format(prize_text));
            item.defineStatic("is_championship", true);
        }

        return item;
    }

    function add_series_race_item(context, target, eventinfo, index)
    {
        var racelist = extractSubRaceCode(eventinfo.race_code);

        var racecode = racelist[index];
        var racedata = main::menu::MRaceData(racecode);
        var coursecode = racedata.course_code;

        var item = hidden::CourseItem.doCopy();
        item.defineStatic("racecode", racecode);
        set_record(context, item, racecode);

        var logo = item["logo"];
        var logof = item["logof"];
        var logo_cx = logo.x + (logo.w / 2);
        var logo_cy = logo.y + (logo.h / 2);
        logo.from_disk = true;
        logo.setImagePath("piece/crs_logo/" + coursecode + ".img");
        
        logof.from_disk = true;
        logof.setImagePath("piece/crs_logo/" + coursecode + ".img");

        target.appendChild(context, item);
        logo.adjustSize();
        
        var scale = 0.9;
        var scalew = scale;

        if (wide)
            scalew = 0.75;

        var w = logo.w * scalew;
        var h = logo.h * scale;
        logo.x = logo_cx - (w / 2) + 2;
        logo.y = logo_cy - (h / 2);

        logo.w = w;
        logo.h = h;
        logof.x = logo.x;
        logof.y = logo.y;
        logof.w = logo.w;
        logof.h = logo.h;
        setFadeActor(logof);

        var trophy = item["trophy"];
        var cx = trophy.x + (trophy.w / 2);
        var cy = trophy.y + (trophy.h / 2);

        h = trophy.h;
        trophy.adjustSize();
        scale = h / trophy.h;

        if (h > 1.0)
            h = 1.0;

        trophy.x = cx - ((trophy.w * scale) / 2);
        trophy.y = cy - ((trophy.h * scale) / 2);
        trophy.w = trophy.w * scale;
        trophy.h = trophy.h * scale;

        var event_name = getEventNameByRaceCode(context, ROOT, eventinfo.race_code);
        var series_count = getSeriesRaceCount(racecode);
        var series_index = getSeriesRaceIndex(racecode);
        var course_name = context.translate(ROOT, "CourseNameCaption", coursecode);
        if (CourseData::getReverseCourse(coursecode) != nil)
        {
            var dir_suffix = context.translate(ROOT, "CourseNameCaption", CourseData::isForwardCourse(coursecode) ? "Normal" : "Reverse");
            course_name = course_name + " " + dir_suffix;
        }

        if (series_count > 1)
        {
            var format_string = context.translate(ROOT, "EntrySpotRaceFormat");
            item.defineStatic("tooltip_text", format_string.build(event_name, series_index, course_name));
            item.defineStatic("event_name", context.translate(ROOT, "RaceStageFormat").build(series_index, course_name));
        }
        else 
        {
            var format_string = context.translate(ROOT, preview_enable ? "EntryPreviewSingleRaceFormat" : "EntrySingleRaceFormat");
            item.defineStatic("tooltip_text", format_string.build(event_name, course_name));
            item.defineStatic("event_name", course_name);
        }

        // var racedata = main::menu::MRaceData(racecode);
        var unit = main::game.race_record.getUnit(racecode);

        var lapstext = nil;
        var timetext = nil;

        if (racedata.getNumberOfLaps() > 0)
            lapstext = context.translate(ROOT, "RaceLapsFormat").format(racedata.getNumberOfLaps());
        
        if (racedata.getLimitTime() > 0)
        {
            var racetime = racedata.getLimitTime();
            var hour = (racetime / 60).toInt();
            var min = (racetime % 60).toInt();
            timetext = context.translate(ROOT, "RaceTimeFormat").format(hour, min);
        }

        if (lapstext != nil)
            item.defineStatic("event_spec", lapstext);
        else if (timetext != nil)
            item.defineStatic("event_spec", timetext);

        item.defineStatic("event_score", unit.best_score);

        return item;
    }

    function set_record(context, item, racecode)
    {
        var trophy_name = nil;
        var rank_text = nil;
        var racedata = main::menu::MRaceData(racecode);
        var unit = main::game.race_record.getUnit(racecode);
        
        if (unit != nil)
        {
            var is_championship = getSeriesRaceCount(racecode) > 0;
            var result = is_championship ? unit.result : unit.spot_result;

            switch (result)
            {
                case "1":
                    trophy_name = "gold";
                    break;

                case "2":
                    if (racedata.entry_num > 2)
                        trophy_name = "silver";
                    else
                        rank_text = result;

                    break;
                    
                case "3":
                    if (racedata.entry_num > 3)
                        trophy_name = "bronze";
                    else
                        rank_text = result;
                    break;

                case "4":
                case "5":
                case "6":
                    rank_text = result;
                    break;
            }
        }

        var trophy = item["trophy"];
        if(trophy_name != nil)
        {
            trophy.from_disk = false;
            trophy.setImagePath("image/gtmode/license/" + trophy_name + ".png");
        }

        if (rank_text != nil)
        {
            item["rank"].text = rank_text;
        }
    }

    function init_mode_item(context)
    {
        ModeSelect.visible = false;
        clear_mode_select(context);

        var composite = ModeSelect::ScrollBox::SelectBox;
        var entry = hidden::ModeItem.doCopy();
        entry["label"].text = context.translate(ROOT, "Entry");

        var entry_image_path = "image/gtmode/event/icon_entry.png";
        var entry_image = entry["image"];
        entry_image.from_disk = false;
        entry_image.cache = false;
        entry_image.setImagePath(entry_image_path);
        
        var entry_imagef = entry["imagef"];
        entry_imagef.from_disk = false;
        entry_imagef.cache = false;
        entry_imagef.setImagePath(entry_image_path);
        setFadeActor(entry_imagef);

        composite.appendChild(context, entry);
        entry_image.adjustSize();
        entry_imagef.adjustSize();
        entry.tooltip = true;
        entry.tooltip_key = "Entry";
        entry.visible = true;
        entry.defineStatic("id", "entry");

        var series_index = getSeriesRaceIndex(last_select_race);
        if (series_index > 0 && preview_enable)
        {
            var preview = hidden::ModeItem.doCopy();
            preview["label"].text = context.translate(ROOT, "Preview");

            var preview_image_path = "image/gtmode/event/icon_preview.png";

            var preview_image = preview["image"];
            preview_image.from_disk = false;
            preview_image.cache = false;
            preview_image.setImagePath(preview_image_path);

            var preview_imagef = preview["imagef"];
            preview_imagef.from_disk = false;
            preview_imagef.cache = false;
            preview_imagef.setImagePath(preview_image_path);
            setFadeActor(preview_imagef);

            composite.appendChild(context, preview);
            preview_image.adjustSize();
            preview_imagef.adjustSize();
            preview.tooltip = true;
            preview.tooltip_key = "Preview";
            preview.visible = true;
            preview.defineStatic("id", "preview");
        }

        ModeSelect.visible = true;
        last_focus_mode_widget = ModeSelect::ScrollBox::SelectBox.first;
        ROOT.setFocus(entry);
    }

    function toggleScoreDisplay(context)
    {
        var widget = ROOT["FG%{fg_idx}"];
        show_aspec = !show_aspec;
        
        // Since otherwise it wouldn't update until the focused event changes
        widget.score.text = context.translate(ROOT, "BestScore").format(last_focus_race_widget["event_score"]);
        // delayOpenConfirmDialog(context, " " + widget.score.text);
        
        widget.spec.visible = !show_aspec;
        widget.score.visible = show_aspec;
        main::sound.play("ok");
    }

    function onActivate(context, event, object)
    {
        var item = object.getFocusedWidget();
        if (item.name == "TypicalOpponents")
        {
            var code = getEventInfo(main::game.menuRef(1), main::game.menuRef(0)).race_code;
            var event = code.substr(0, code.size - 5)
            var opponent_data = context.getUpdateContext().loadFile("textdata/raw/TypicalOpponents/%{event}")
            
            if (opponent_data != nil && opponent_data != "")
            {
                var opps = opponent_data.split(";");
                var col1 = "";
                var col2 = "";

                for (var i = 0; i < opps.size; i++)
                {
                    if (i >= 32)
                    {
                        col2 += "etc.";
                        break;
                    }

                    if (i > 16)
                        col2 += i == opps.size - 1 ? "- %{opps[i]}" : "- %{opps[i]}\n"; 
                    else
                        col1 += i == opps.size - 1 ? "- %{opps[i]}" : "- %{opps[i]}\n"; 
                    
                }
                main::sound.play("ok");
                TypicalOpponentsPopup::open(context, col1, col2, context.translate(ROOT, "TypicalOpponents"));
            }
            else 
            {
                main::sound.play("disable");
            }
        }
        return EVENTRESULT_FILTER;
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PS2_PAD_CTRL_START:
                if (!last_focus_race_widget.defined("is_championship"))
                    toggleScoreDisplay(context);
                return EVENTRESULT_FILTER;
        }

        return EVENTRESULT_CONTINUE;
    }
}

module GTmodeProject::EventCourseRoot::RaceSelect::ScrollBox::SelectBox
{
    // Gold any event
    // L2, R1, R1, R1, L1, L1, L2, R2
    static craft_command = [
        //PS2_PAD_CTRL_SELECT,
        PS2_PAD_CTRL_L2,
        PS2_PAD_CTRL_R1,
        PS2_PAD_CTRL_R1,
        //PS2_PAD_CTRL_SELECT,
        PS2_PAD_CTRL_R1,
        PS2_PAD_CTRL_L1,
        PS2_PAD_CTRL_L1,
        //PS2_PAD_CTRL_SELECT,
        PS2_PAD_CTRL_L2,
        //PS2_PAD_CTRL_SELECT,
        PS2_PAD_CTRL_R2,
        //PS2_PAD_CTRL_SELECT
    ];

    if (is_debug)
    {
        craft_command = [
            PS2_PAD_CTRL_R1
        ];
    }

    function doCraft(context)
    {
        var fwidget = ROOT.getFocusedWidget();
        if (fwidget == nil)
            return;

        if (!fwidget.defined("racecode"))
            return;

        var race_code = fwidget["racecode"];
        var unit = main::game.race_record.getUnit(race_code);
        unit.update("event", "1");
        main::game.calendar.putRunRaceEvent(race_code, unit.result, nil, 10000);
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PS2_PAD_CTRL_SELECT:
                main::sound.play("ok");
                QuickMenuPopup::open(context);
                return EVENTRESULT_FILTER;
        }

        if (craft(context, event, craft_command, doCraft))
            return EVENTRESULT_FILTER;

        return EVENTRESULT_CONTINUE;
    }

    function onActivate(context, event, object)
    {
        var item = object.getFocusedWidget();

        if (item.name == "CourseItem")
        {
            var racedata = main::menu::MRaceData(item["racecode"]);

            if (item.defined("is_championship") && track_rand_active)
            {    
                main::sound.play("disable");
                openConfirmDialog(context, 2, context.translate(ROOT, "ChampTrackRand"));

                if (!openConfirmDialog(context, 4, context.translate(ROOT, "ChampDisableRand")))
                    return EVENTRESULT_FILTER;
                else
                {
                    randomizer_flag &= ~FLAG_TRACK_RANDOMIZER
                    track_rand_active = false;
                    saveNewSettings(context, false, false);
                }
            }
        }

        if (item == nil || !item.defined("racecode"))
        {
            main::sound.play("disable");
            return EVENTRESULT_FILTER;
        }

        main::sound.play("ok");

        last_select_race = item["racecode"];
        init_mode(context, MODE_SELECT_MODE);
        return EVENTRESULT_FILTER;
    }

    function onValueChanged(context)
    {
        return 0;
    }
}

module GTmodeProject::EventCourseRoot::ModeSelect::ScrollBox::SelectBox
{
    // These are split out into a function now that they have two potential callers
    function checkValidWidget(context, widget)
    {
        var item = widget;
        
        if (item == nil)
        {
            main::sound.play("disable");
            return nil;
        }

        if (!item.defined("id"))
        {
            main::sound.play("disable");
            return nil;
        }

        return item;
    }

    function goToRace(context)
    {
        if (!sureRiding(context))
            return;

        if (!checkEntryTire(context, last_select_race, nil))
            return;

        if (!sureNoGarageFull(context))
            return;

        if (getSeriesRaceCount(last_select_race) == 0 && isSpotRaceCompleted(last_select_race))
        {
            main::sound.play("ok");
            var result = openConfirmDialog(context, 3, 
                context.translate(ROOT, "ComfirmClearSingleRaceResult"),
                nil,
                context.translate(ROOT, "YesClear"),
                context.translate(ROOT, "NoGoRace"));
            
            if (result)
            {
                clearSpotRaceResult(last_select_race);
                openConfirmDialog(context, 0, context.translate(ROOT, "NotifySingleRaceResultCleared"));
                init_race_item(context);
                init_mode(context, MODE_SELECT_RACE);
                return;
            }

            context.sync(0.25);
        }

        // Check again here in case it was disabled within this menu
        track_rand_active = randomizer_flag & FLAG_TRACK_RANDOMIZER;

        main::sound.play("next");
        main::game.overwrite_enemy_num = 0;
        main::game.course_code = "";
        main::game.race_code = last_select_race;
        if (track_rand_active)
        {
            main::game.course_code = getRandomCourse(context, last_select_race, true);
        }
        main::game.major_menu_project = "gtmode";
        main::game.major_menu_page = ROOT.name;
        main::game.saveMenuStack();

        if (isChampionship(last_select_race))
            exit_menu(context, "championship");
        else
            exit_menu(context, "solo_event");
    }

    function onKeyPress(context, event)
    {
        switch (event.keysym)
        {
            case PS2_PAD_CTRL_R1:
                if (EventHallRoot::is_endurance)
                    return EVENTRESULT_FILTER;
                var item = checkValidWidget(context, ROOT.getFocusedWidget());
                if (item == nil)
                    return EVENTRESULT_FILTER;

                main::sound.play("ok")
                SettingPopup::open(context, goToRace, true);
                return EVENTRESULT_FILTER;
        }
        
        return EVENTRESULT_CONTINUE;
    }

    function onActivate(context, event, object)
    {
        var item = checkValidWidget(context, object.getFocusedWidget())

        if (item == nil)
            return;

        switch (item["id"])
        {
            case "entry":
                goToRace(context);
                return EVENTRESULT_FILTER;
                break;

            case "preview":
                main::sound.play("next");
                main::game.overwrite_enemy_num = 0;
                main::game.course_code = "";
                main::game.race_code = last_select_race;
                if (track_rand_active)
                {
                    main::game.course_code = getRandomCourse(context, last_select_race, true);
                }
                main::game.major_menu_project = "gtmode";
                main::game.major_menu_page = ROOT.name;
                main::game.saveMenuStack();
                exit_menu(context, "race_view");
                main::game.calendar.putRunRaceEvent(last_select_race, "view", nil, 0);
                break;
        }

        return EVENTRESULT_FILTER;
    }

    function onValueChanged(context)
    {
        return 0;
    }
}

module GTmodeProject::EventCourseRoot::TypicalOpponents
{
    function onFocusEnter(context, event)
    {
        var tooltip = ROOT["Common"]["ToolTip"]["tip"];
        tooltip.value = context.translate(ROOT, "TOOLTIP|TypicalOpponents");
    }

    function onFocusLeave(context, event)
    {
        var widget = nil;

        if (menu_mode == MODE_SELECT_MODE)
        {
            if (last_focus_mode_widget == nil)
                widget = ModeSelect::ScrollBox::SelectBox.first;
            else
                widget = last_focus_mode_widget;
        }
        else if (menu_mode == MODE_SELECT_RACE)
        {
            if (last_focus_race_widget == nil)
                widget = RaceSelect::ScrollBox::SelectBox.first;
            else
                widget = last_focus_race_widget;
        }

        if (widget != nil)
            ROOT.setFocus(widget);

        return EVENTRESULT_FILTER;
    }
}

module GTmodeProject::EventCourseRoot::hidden::ModeItem
{
    function onFocusEnter(context, event)
    {
        last_focus_mode_widget = event.widget;
    }
}

module GTmodeProject::EventCourseRoot::hidden::CourseItem
{
    function onFocusEnter(context, event)
    {
        var widget = event.widget;
        last_focus_race_widget = widget;
        if (widget != nil)
        {
            var tooltip_text = "";
            if (widget.defined("tooltip_text"))
                tooltip_text = widget["tooltip_text"];
            
            var tooltip = ROOT["Common"]["ToolTip"]["tip"];
            tooltip.value = tooltip_text;
            
            var name = "";
            if (widget.defined("event_name"))
                name = widget["event_name"];

            if (FG1.visible)
                FG1::stage.text = name;

            if (FG2.visible)
                FG2::stage.text = name;

            var spec = "";
            if (widget.defined("event_spec"))
                spec = widget["event_spec"];

            var score = "";
            if (widget.defined("event_score"))
                score = widget["event_score"];

            if (FG1.visible)
                FG1::spec.text = spec;

            if (show_aspec && !widget.defined("is_championship"))
            {
                FG1::score.text = context.translate(ROOT, "BestScore").format(score);
                FG2::score.text = context.translate(ROOT, "BestScore").format(score);
            }
            else
            {
                FG1::score.text = widget["event_spec"];
                FG2::score.text = widget["event_spec"];
            }

            if (FG2.visible)
                FG2::spec.text = spec;
        }
        return 0;
    }
}
